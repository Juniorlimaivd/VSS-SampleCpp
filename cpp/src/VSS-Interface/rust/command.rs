// This file is generated. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(Clone,Default)]
pub struct Robot_Command {
    // message fields
    id: ::std::option::Option<u32>,
    left_vel: ::std::option::Option<f32>,
    right_vel: ::std::option::Option<f32>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for Robot_Command {}

impl Robot_Command {
    pub fn new() -> Robot_Command {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static Robot_Command {
        static mut instance: ::protobuf::lazy::Lazy<Robot_Command> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Robot_Command,
        };
        unsafe {
            instance.get(|| {
                Robot_Command {
                    id: ::std::option::Option::None,
                    left_vel: ::std::option::Option::None,
                    right_vel: ::std::option::Option::None,
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // required uint32 id = 1;

    pub fn clear_id(&mut self) {
        self.id = ::std::option::Option::None;
    }

    pub fn has_id(&self) -> bool {
        self.id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u32) {
        self.id = ::std::option::Option::Some(v);
    }

    pub fn get_id(&self) -> u32 {
        self.id.unwrap_or(0)
    }

    // required float left_vel = 2;

    pub fn clear_left_vel(&mut self) {
        self.left_vel = ::std::option::Option::None;
    }

    pub fn has_left_vel(&self) -> bool {
        self.left_vel.is_some()
    }

    // Param is passed by value, moved
    pub fn set_left_vel(&mut self, v: f32) {
        self.left_vel = ::std::option::Option::Some(v);
    }

    pub fn get_left_vel(&self) -> f32 {
        self.left_vel.unwrap_or(0.)
    }

    // required float right_vel = 3;

    pub fn clear_right_vel(&mut self) {
        self.right_vel = ::std::option::Option::None;
    }

    pub fn has_right_vel(&self) -> bool {
        self.right_vel.is_some()
    }

    // Param is passed by value, moved
    pub fn set_right_vel(&mut self, v: f32) {
        self.right_vel = ::std::option::Option::Some(v);
    }

    pub fn get_right_vel(&self) -> f32 {
        self.right_vel.unwrap_or(0.)
    }
}

impl ::protobuf::Message for Robot_Command {
    fn is_initialized(&self) -> bool {
        if self.id.is_none() {
            return false;
        };
        if self.left_vel.is_none() {
            return false;
        };
        if self.right_vel.is_none() {
            return false;
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_uint32());
                    self.id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_float());
                    self.left_vel = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_float());
                    self.right_vel = ::std::option::Option::Some(tmp);
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.id {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if self.left_vel.is_some() {
            my_size += 5;
        };
        if self.right_vel.is_some() {
            my_size += 5;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.id {
            try!(os.write_uint32(1, v));
        };
        if let Some(v) = self.left_vel {
            try!(os.write_float(2, v));
        };
        if let Some(v) = self.right_vel {
            try!(os.write_float(3, v));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<Robot_Command>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for Robot_Command {
    fn new() -> Robot_Command {
        Robot_Command::new()
    }

    fn descriptor_static(_: ::std::option::Option<Robot_Command>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_u32_accessor(
                    "id",
                    Robot_Command::has_id,
                    Robot_Command::get_id,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_f32_accessor(
                    "left_vel",
                    Robot_Command::has_left_vel,
                    Robot_Command::get_left_vel,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_f32_accessor(
                    "right_vel",
                    Robot_Command::has_right_vel,
                    Robot_Command::get_right_vel,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Robot_Command>(
                    "Robot_Command",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for Robot_Command {
    fn clear(&mut self) {
        self.clear_id();
        self.clear_left_vel();
        self.clear_right_vel();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for Robot_Command {
    fn eq(&self, other: &Robot_Command) -> bool {
        self.id == other.id &&
        self.left_vel == other.left_vel &&
        self.right_vel == other.right_vel &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for Robot_Command {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct Global_Commands {
    // message fields
    id: ::std::option::Option<u32>,
    is_team_yellow: ::std::option::Option<bool>,
    robot_commands: ::protobuf::RepeatedField<Robot_Command>,
    situation: ::std::option::Option<u32>,
    name: ::protobuf::SingularField<::std::string::String>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for Global_Commands {}

impl Global_Commands {
    pub fn new() -> Global_Commands {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static Global_Commands {
        static mut instance: ::protobuf::lazy::Lazy<Global_Commands> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Global_Commands,
        };
        unsafe {
            instance.get(|| {
                Global_Commands {
                    id: ::std::option::Option::None,
                    is_team_yellow: ::std::option::Option::None,
                    robot_commands: ::protobuf::RepeatedField::new(),
                    situation: ::std::option::Option::None,
                    name: ::protobuf::SingularField::none(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional uint32 id = 1;

    pub fn clear_id(&mut self) {
        self.id = ::std::option::Option::None;
    }

    pub fn has_id(&self) -> bool {
        self.id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u32) {
        self.id = ::std::option::Option::Some(v);
    }

    pub fn get_id(&self) -> u32 {
        self.id.unwrap_or(0)
    }

    // optional bool is_team_yellow = 2;

    pub fn clear_is_team_yellow(&mut self) {
        self.is_team_yellow = ::std::option::Option::None;
    }

    pub fn has_is_team_yellow(&self) -> bool {
        self.is_team_yellow.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_team_yellow(&mut self, v: bool) {
        self.is_team_yellow = ::std::option::Option::Some(v);
    }

    pub fn get_is_team_yellow(&self) -> bool {
        self.is_team_yellow.unwrap_or(false)
    }

    // repeated .vss_command.Robot_Command robot_commands = 3;

    pub fn clear_robot_commands(&mut self) {
        self.robot_commands.clear();
    }

    // Param is passed by value, moved
    pub fn set_robot_commands(&mut self, v: ::protobuf::RepeatedField<Robot_Command>) {
        self.robot_commands = v;
    }

    // Mutable pointer to the field.
    pub fn mut_robot_commands(&mut self) -> &mut ::protobuf::RepeatedField<Robot_Command> {
        &mut self.robot_commands
    }

    // Take field
    pub fn take_robot_commands(&mut self) -> ::protobuf::RepeatedField<Robot_Command> {
        ::std::mem::replace(&mut self.robot_commands, ::protobuf::RepeatedField::new())
    }

    pub fn get_robot_commands(&self) -> &[Robot_Command] {
        &self.robot_commands
    }

    // optional uint32 situation = 4;

    pub fn clear_situation(&mut self) {
        self.situation = ::std::option::Option::None;
    }

    pub fn has_situation(&self) -> bool {
        self.situation.is_some()
    }

    // Param is passed by value, moved
    pub fn set_situation(&mut self, v: u32) {
        self.situation = ::std::option::Option::Some(v);
    }

    pub fn get_situation(&self) -> u32 {
        self.situation.unwrap_or(0)
    }

    // optional string name = 5;

    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name.set_default();
        };
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
}

impl ::protobuf::Message for Global_Commands {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_uint32());
                    self.id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_bool());
                    self.is_team_yellow = ::std::option::Option::Some(tmp);
                },
                3 => {
                    try!(::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.robot_commands));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_uint32());
                    self.situation = ::std::option::Option::Some(tmp);
                },
                5 => {
                    try!(::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.name));
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.id {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if self.is_team_yellow.is_some() {
            my_size += 2;
        };
        for value in &self.robot_commands {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.situation {
            my_size += ::protobuf::rt::value_size(4, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.name {
            my_size += ::protobuf::rt::string_size(5, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.id {
            try!(os.write_uint32(1, v));
        };
        if let Some(v) = self.is_team_yellow {
            try!(os.write_bool(2, v));
        };
        for v in &self.robot_commands {
            try!(os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.situation {
            try!(os.write_uint32(4, v));
        };
        if let Some(v) = self.name.as_ref() {
            try!(os.write_string(5, &v));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<Global_Commands>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for Global_Commands {
    fn new() -> Global_Commands {
        Global_Commands::new()
    }

    fn descriptor_static(_: ::std::option::Option<Global_Commands>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_u32_accessor(
                    "id",
                    Global_Commands::has_id,
                    Global_Commands::get_id,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor(
                    "is_team_yellow",
                    Global_Commands::has_is_team_yellow,
                    Global_Commands::get_is_team_yellow,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_message_accessor(
                    "robot_commands",
                    Global_Commands::get_robot_commands,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_u32_accessor(
                    "situation",
                    Global_Commands::has_situation,
                    Global_Commands::get_situation,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor(
                    "name",
                    Global_Commands::has_name,
                    Global_Commands::get_name,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Global_Commands>(
                    "Global_Commands",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for Global_Commands {
    fn clear(&mut self) {
        self.clear_id();
        self.clear_is_team_yellow();
        self.clear_robot_commands();
        self.clear_situation();
        self.clear_name();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for Global_Commands {
    fn eq(&self, other: &Global_Commands) -> bool {
        self.id == other.id &&
        self.is_team_yellow == other.is_team_yellow &&
        self.robot_commands == other.robot_commands &&
        self.situation == other.situation &&
        self.name == other.name &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for Global_Commands {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

static file_descriptor_proto_data: &'static [u8] = &[
    0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
    0x0b, 0x76, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x57, 0x0a, 0x0d,
    0x52, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x0e, 0x0a,
    0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a,
    0x08, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x02, 0x28, 0x02, 0x52,
    0x07, 0x6c, 0x65, 0x66, 0x74, 0x56, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68,
    0x74, 0x5f, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x02, 0x28, 0x02, 0x52, 0x08, 0x72, 0x69, 0x67,
    0x68, 0x74, 0x56, 0x65, 0x6c, 0x22, 0xbc, 0x01, 0x0a, 0x0f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
    0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
    0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f,
    0x74, 0x65, 0x61, 0x6d, 0x5f, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28,
    0x08, 0x52, 0x0c, 0x69, 0x73, 0x54, 0x65, 0x61, 0x6d, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x12,
    0x41, 0x0a, 0x0e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
    0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x73, 0x73, 0x5f, 0x63, 0x6f,
    0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x43, 0x6f, 0x6d, 0x6d,
    0x61, 0x6e, 0x64, 0x52, 0x0d, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
    0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
    0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x69, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
    0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
    0x6e, 0x61, 0x6d, 0x65, 0x4a, 0xf2, 0x12, 0x0a, 0x06, 0x12, 0x04, 0x11, 0x00, 0x2c, 0x01, 0x0a,
    0xcb, 0x08, 0x0a, 0x01, 0x02, 0x12, 0x03, 0x11, 0x08, 0x13, 0x1a, 0x69, 0x21, 0x20, 0x41, 0x71,
    0x75, 0x69, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x73, 0x65, 0x20, 0x75, 0x6d, 0x20,
    0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2c, 0x20, 0x71, 0x75, 0x65, 0x20, 0x6e, 0x61, 0x20,
    0x70, 0x72, 0x61, 0x74, 0x69, 0x63, 0x61, 0x20, 0x67, 0x65, 0x72, 0x61, 0x20, 0x75, 0x6d, 0x20,
    0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x28, 0x28, 0x43, 0x2b, 0x2b, 0x29,
    0x20, 0x2d, 0x3e, 0x20, 0x28, 0x21, 0x29, 0x20, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x6e, 0x61,
    0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x76, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
    0x61, 0x6e, 0x64, 0x3b, 0x0a, 0x32, 0xfe, 0x01, 0x0a, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x66,
    0x69, 0x6c, 0x65, 0x20, 0x69, 0x73, 0x20, 0x70, 0x61, 0x72, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x56, 0x53, 0x53, 0x2d, 0x53, 0x44, 0x4b, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65,
    0x63, 0x74, 0x2e, 0x0a, 0x0a, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x53, 0x6f, 0x75, 0x72, 0x63,
    0x65, 0x20, 0x43, 0x6f, 0x64, 0x65, 0x20, 0x46, 0x6f, 0x72, 0x6d, 0x20, 0x69, 0x73, 0x20, 0x73,
    0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x65,
    0x72, 0x6d, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x47, 0x4e, 0x55, 0x20, 0x47,
    0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x20, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x20, 0x4c, 0x49,
    0x43, 0x45, 0x4e, 0x53, 0x45, 0x2c, 0x0a, 0x20, 0x76, 0x2e, 0x20, 0x33, 0x2e, 0x30, 0x2e, 0x20,
    0x49, 0x66, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x70, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
    0x20, 0x47, 0x50, 0x4c, 0x20, 0x77, 0x61, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x69, 0x73,
    0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68,
    0x69, 0x73, 0x0a, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x2c, 0x20, 0x59, 0x6f, 0x75, 0x20, 0x63, 0x61,
    0x6e, 0x20, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x20,
    0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6e, 0x75, 0x2e, 0x6f,
    0x72, 0x67, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x2f, 0x67, 0x70, 0x6c, 0x2d,
    0x33, 0x2e, 0x30, 0x2f, 0x2e, 0x0a, 0x32, 0xd4, 0x05, 0x21, 0x20, 0x41, 0x71, 0x75, 0x69, 0x2c,
    0x20, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x2d, 0x73, 0x65, 0x20, 0x61, 0x20, 0x64,
    0x65, 0x66, 0x69, 0x6e, 0x69, 0xc3, 0xa7, 0xc3, 0xa3, 0x6f, 0x20, 0x64, 0x6f, 0x20, 0x70, 0x61,
    0x63, 0x6f, 0x74, 0x65, 0x20, 0x64, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x61, 0x6e, 0x64, 0x6f, 0x73,
    0x20, 0x64, 0x65, 0x20, 0x75, 0x6d, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x20, 0x66,
    0x6f, 0x72, 0x6d, 0x61, 0x74, 0x6f, 0x20, 0x64, 0x61, 0x20, 0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f,
    0x74, 0x65, 0x63, 0x61, 0x20, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x20, 0x50, 0x72, 0x6f, 0x74,
    0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x20, 0x28, 0x70, 0x72,
    0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x29, 0x2e, 0x0a, 0x21, 0x20, 0x50, 0x61, 0x72, 0x61, 0x20,
    0x6d, 0x61, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0xc3, 0xa7, 0xc3, 0xb5,
    0x65, 0x73, 0x20, 0x73, 0x6f, 0x62, 0x72, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
    0x66, 0x3a, 0x20, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c,
    0x6f, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
    0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
    0x73, 0x2f, 0x0a, 0x21, 0x20, 0x45, 0x73, 0x73, 0x65, 0x20, 0x70, 0x61, 0x63, 0x6f, 0x74, 0x65,
    0x20, 0xc3, 0xa9, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0xc3, 0xa1, 0x76, 0x65, 0x6c,
    0x20, 0x70, 0x6f, 0x72, 0x20, 0x63, 0x61, 0x72, 0x72, 0x65, 0x67, 0x61, 0x72, 0x20, 0x61, 0x73,
    0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0xc3, 0xa7, 0xc3, 0xb5, 0x65, 0x73, 0x20, 0x64,
    0x65, 0x20, 0x63, 0x6f, 0x6d, 0x61, 0x6e, 0x64, 0x6f, 0x20, 0x64, 0x65, 0x20, 0x75, 0x6d, 0x20,
    0x74, 0x69, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x20, 0x66, 0x75, 0x74, 0x65, 0x62, 0x6f, 0x6c, 0x20,
    0x64, 0x65, 0x20, 0x72, 0x6f, 0x62, 0xc3, 0xb4, 0x73, 0x2e, 0x0a, 0x21, 0x20, 0x45, 0x73, 0x73,
    0x61, 0x20, 0x70, 0x61, 0x63, 0x6f, 0x74, 0x65, 0x20, 0x53, 0x4f, 0x4d, 0x45, 0x4e, 0x54, 0x45,
    0x20, 0xc3, 0x89, 0x20, 0x55, 0x54, 0x49, 0x4c, 0x49, 0x5a, 0x41, 0x44, 0x4f, 0x20, 0x70, 0x61,
    0x72, 0x61, 0x20, 0x65, 0x6e, 0x76, 0x69, 0x61, 0x72, 0x20, 0x6f, 0x73, 0x20, 0x63, 0x6f, 0x6d,
    0x61, 0x6e, 0x64, 0x6f, 0x73, 0x20, 0x70, 0x61, 0x72, 0x61, 0x20, 0x72, 0x6f, 0x62, 0xc3, 0xb4,
    0x73, 0x20, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x20, 0x56, 0x53,
    0x53, 0x2d, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x0a, 0x21, 0x20, 0x44, 0x65,
    0x6e, 0x74, 0x72, 0x65, 0x20, 0x65, 0x73, 0x73, 0x61, 0x73, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72,
    0x6d, 0x61, 0xc3, 0xa7, 0xc3, 0xb5, 0x65, 0x73, 0x20, 0x64, 0x6f, 0x20, 0x70, 0x61, 0x63, 0x6f,
    0x74, 0x65, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6d, 0x3a, 0x20, 0x49, 0x44, 0x20, 0x64,
    0x6f, 0x20, 0x63, 0x6f, 0x6d, 0x61, 0x6e, 0x64, 0x6f, 0x2c, 0x20, 0x73, 0x65, 0x20, 0x6f, 0x20,
    0x74, 0x69, 0x6d, 0x65, 0x20, 0xc3, 0xa9, 0x20, 0x61, 0x6d, 0x61, 0x72, 0x65, 0x6c, 0x6f, 0x20,
    0x6f, 0x75, 0x20, 0x61, 0x7a, 0x75, 0x6c, 0x2c, 0x20, 0x75, 0x6d, 0x61, 0x20, 0x6c, 0x69, 0x73,
    0x74, 0x61, 0x20, 0x64, 0x69, 0x6e, 0xc3, 0xa2, 0x6d, 0x69, 0x63, 0x61, 0x20, 0x64, 0x65, 0x20,
    0x63, 0x6f, 0x6d, 0x61, 0x6e, 0x64, 0x6f, 0x73, 0x0a, 0x21, 0x20, 0x65, 0x20, 0x75, 0x6d, 0x20,
    0x63, 0xc3, 0xb3, 0x64, 0x69, 0x67, 0x6f, 0x20, 0x64, 0x65, 0x20, 0x73, 0x69, 0x74, 0x75, 0x61,
    0xc3, 0xa7, 0xc3, 0xa3, 0x6f, 0x2e, 0x20, 0x50, 0x61, 0x72, 0x61, 0x20, 0x75, 0x74, 0x69, 0x6c,
    0x69, 0x7a, 0x61, 0x72, 0x20, 0x65, 0x73, 0x73, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
    0x6f, 0x6c, 0x6f, 0x2c, 0x20, 0x6f, 0x20, 0x6d, 0x65, 0x73, 0x6d, 0x6f, 0x20, 0x64, 0x65, 0x76,
    0x65, 0x20, 0x73, 0x65, 0x72, 0x20, 0x70, 0x72, 0xc3, 0xa9, 0x63, 0x6f, 0x6d, 0x70, 0xc3, 0xad,
    0x6c, 0x61, 0x64, 0x6f, 0x20, 0x70, 0x61, 0x72, 0x61, 0x20, 0x75, 0x6d, 0x61, 0x20, 0x6c, 0x69,
    0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x6d, 0x20, 0x65, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
    0x63, 0x61, 0x0a, 0x21, 0x20, 0x67, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x20, 0x75, 0x6d, 0x20,
    0x74, 0x72, 0x65, 0x63, 0x68, 0x6f, 0x20, 0x64, 0x65, 0x20, 0x63, 0xc3, 0xb3, 0x64, 0x69, 0x67,
    0x6f, 0x20, 0x71, 0x75, 0x65, 0x20, 0x64, 0x65, 0x76, 0x65, 0x20, 0x73, 0x65, 0x72, 0x20, 0x72,
    0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x61, 0x64, 0x6f, 0x2e, 0x0a, 0x0a, 0xcc, 0x01,
    0x0a, 0x02, 0x04, 0x00, 0x12, 0x04, 0x16, 0x00, 0x1a, 0x01, 0x1a, 0xbf, 0x01, 0x21, 0x20, 0x45,
    0x73, 0x73, 0x61, 0x20, 0x6d, 0x65, 0x6e, 0x73, 0x61, 0x67, 0x65, 0x6d, 0x20, 0xc3, 0xa9, 0x20,
    0x75, 0x6d, 0x61, 0x20, 0x73, 0x75, 0x62, 0x6d, 0x65, 0x6e, 0x73, 0x61, 0x67, 0x65, 0x6d, 0x20,
    0x64, 0x6f, 0x20, 0x70, 0x61, 0x63, 0x6f, 0x74, 0x65, 0x20, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
    0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x20, 0x71, 0x75, 0x65, 0x20, 0x64, 0x65,
    0x20, 0x66, 0x61, 0x74, 0x6f, 0x20, 0xc3, 0xa9, 0x20, 0x65, 0x6e, 0x76, 0x69, 0x61, 0x64, 0x6f,
    0x2e, 0x20, 0x45, 0x73, 0x73, 0x61, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0xc3, 0xa7,
    0xc3, 0xa3, 0x6f, 0x20, 0xc3, 0xa9, 0x20, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x64, 0x61,
    0x20, 0x70, 0x61, 0x72, 0x61, 0x0a, 0x21, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74,
    0x61, 0x72, 0x20, 0x61, 0x73, 0x20, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x64, 0x61, 0x64, 0x65,
    0x73, 0x20, 0x64, 0x61, 0x73, 0x20, 0x72, 0x6f, 0x64, 0x61, 0x73, 0x20, 0x64, 0x69, 0x72, 0x65,
    0x69, 0x74, 0x61, 0x20, 0x65, 0x20, 0x65, 0x73, 0x71, 0x75, 0x65, 0x72, 0x64, 0x61, 0x20, 0x64,
    0x65, 0x20, 0x75, 0x6d, 0x20, 0x72, 0x6f, 0x62, 0xc3, 0xb4, 0x2e, 0x0a, 0x0a, 0x0a, 0x0a, 0x03,
    0x04, 0x00, 0x01, 0x12, 0x03, 0x16, 0x08, 0x15, 0x0a, 0x38, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x00,
    0x12, 0x03, 0x17, 0x08, 0x1f, 0x22, 0x2b, 0x21, 0x20, 0x49, 0x44, 0x20, 0x71, 0x75, 0x65, 0x20,
    0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x64, 0x65, 0x20, 0x71, 0x75, 0x61, 0x6c, 0x20, 0x72,
    0x6f, 0x62, 0xc3, 0xb4, 0x20, 0xc3, 0xa9, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x6d, 0x61, 0x6e, 0x64,
    0x6f, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x04, 0x12, 0x03, 0x17, 0x08, 0x10,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x05, 0x12, 0x03, 0x17, 0x11, 0x17, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x17, 0x18, 0x1a, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x00, 0x02, 0x00, 0x03, 0x12, 0x03, 0x17, 0x1d, 0x1e, 0x0a, 0x2b, 0x0a, 0x04, 0x04, 0x00,
    0x02, 0x01, 0x12, 0x03, 0x18, 0x08, 0x24, 0x22, 0x1e, 0x21, 0x20, 0x56, 0x65, 0x6c, 0x6f, 0x63,
    0x69, 0x64, 0x61, 0x64, 0x65, 0x20, 0x64, 0x61, 0x20, 0x72, 0x6f, 0x64, 0x61, 0x20, 0x65, 0x73,
    0x71, 0x75, 0x65, 0x72, 0x64, 0x61, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x04,
    0x12, 0x03, 0x18, 0x08, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x05, 0x12, 0x03,
    0x18, 0x11, 0x16, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x18, 0x17,
    0x1f, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x03, 0x12, 0x03, 0x18, 0x22, 0x23, 0x0a,
    0x2a, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x02, 0x12, 0x03, 0x19, 0x08, 0x25, 0x22, 0x1d, 0x21, 0x20,
    0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x64, 0x61, 0x64, 0x65, 0x20, 0x64, 0x61, 0x20, 0x72, 0x6f,
    0x64, 0x61, 0x20, 0x64, 0x69, 0x72, 0x65, 0x69, 0x74, 0x61, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x02, 0x04, 0x12, 0x03, 0x19, 0x08, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02,
    0x02, 0x05, 0x12, 0x03, 0x19, 0x11, 0x16, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x01,
    0x12, 0x03, 0x19, 0x17, 0x20, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x03, 0x12, 0x03,
    0x19, 0x23, 0x24, 0x0a, 0x39, 0x0a, 0x02, 0x04, 0x01, 0x12, 0x04, 0x1d, 0x00, 0x2c, 0x01, 0x1a,
    0x2d, 0x21, 0x20, 0x45, 0x73, 0x73, 0x61, 0x20, 0xc3, 0xa9, 0x20, 0x61, 0x20, 0x6d, 0x65, 0x6e,
    0x73, 0x61, 0x67, 0x65, 0x6d, 0x20, 0x71, 0x75, 0x65, 0x20, 0x64, 0x65, 0x20, 0x66, 0x61, 0x74,
    0x6f, 0x20, 0xc3, 0xa9, 0x20, 0x65, 0x6e, 0x76, 0x69, 0x61, 0x64, 0x61, 0x2e, 0x0a, 0x0a, 0x0a,
    0x0a, 0x03, 0x04, 0x01, 0x01, 0x12, 0x03, 0x1d, 0x08, 0x17, 0x0a, 0x7c, 0x0a, 0x04, 0x04, 0x01,
    0x02, 0x00, 0x12, 0x03, 0x1e, 0x08, 0x2f, 0x22, 0x6f, 0x21, 0x20, 0x49, 0x44, 0x20, 0x64, 0x61,
    0x20, 0x6d, 0x65, 0x6e, 0x73, 0x61, 0x67, 0x65, 0x6d, 0x2e, 0x20, 0x41, 0x66, 0x69, 0x6d, 0x20,
    0x64, 0x65, 0x20, 0x73, 0x65, 0x72, 0x20, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x64, 0x6f,
    0x20, 0x63, 0x6f, 0x6d, 0x6f, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x2d, 0x70, 0x72, 0x6f,
    0x76, 0x61, 0x20, 0x70, 0x61, 0x72, 0x61, 0x20, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
    0x72, 0x20, 0x73, 0x65, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0xc3,
    0xa7, 0xc3, 0xa3, 0x6f, 0x20, 0x65, 0x73, 0x74, 0xc3, 0xa1, 0x20, 0x73, 0x69, 0x6e, 0x63, 0x72,
    0x6f, 0x6e, 0x69, 0x7a, 0x61, 0x64, 0x61, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00,
    0x04, 0x12, 0x03, 0x1e, 0x08, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x05, 0x12,
    0x03, 0x1e, 0x11, 0x17, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x01, 0x12, 0x03, 0x1e,
    0x28, 0x2a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x03, 0x12, 0x03, 0x1e, 0x2d, 0x2e,
    0x0a, 0x40, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x01, 0x12, 0x03, 0x1f, 0x08, 0x3b, 0x22, 0x33, 0x21,
    0x20, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x6f, 0x20, 0x71, 0x75, 0x65, 0x20, 0x64, 0x65,
    0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x65, 0x20, 0x6f, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0xc3,
    0xa9, 0x20, 0x61, 0x6d, 0x61, 0x72, 0x65, 0x6c, 0x6f, 0x20, 0x6f, 0x75, 0x20, 0x61, 0x7a, 0x75,
    0x6c, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x04, 0x12, 0x03, 0x1f, 0x08, 0x10,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x05, 0x12, 0x03, 0x1f, 0x11, 0x15, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x01, 0x12, 0x03, 0x1f, 0x28, 0x36, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x01, 0x02, 0x01, 0x03, 0x12, 0x03, 0x1f, 0x39, 0x3a, 0x0a, 0x57, 0x0a, 0x04, 0x04, 0x01,
    0x02, 0x02, 0x12, 0x03, 0x20, 0x08, 0x33, 0x22, 0x4a, 0x21, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x61,
    0x20, 0x64, 0x69, 0x6e, 0xc3, 0xa2, 0x6d, 0x69, 0x63, 0x61, 0x20, 0x64, 0x65, 0x20, 0x63, 0x6f,
    0x6d, 0x61, 0x6e, 0x64, 0x6f, 0x73, 0x2e, 0x20, 0x53, 0x65, 0x6e, 0x64, 0x6f, 0x20, 0x73, 0x65,
    0x6d, 0x70, 0x72, 0x65, 0x20, 0x33, 0x2c, 0x20, 0x64, 0x65, 0x76, 0x69, 0x64, 0x6f, 0x20, 0x61,
    0x20, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x64, 0x61, 0x64, 0x65, 0x20, 0x72, 0x6f, 0x62, 0xc3,
    0xb4, 0x73, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x02, 0x04, 0x12, 0x03, 0x20, 0x08,
    0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x02, 0x06, 0x12, 0x03, 0x20, 0x11, 0x1e, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x02, 0x01, 0x12, 0x03, 0x20, 0x20, 0x2e, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x01, 0x02, 0x02, 0x03, 0x12, 0x03, 0x20, 0x31, 0x32, 0x0a, 0x6e, 0x0a, 0x04, 0x04,
    0x01, 0x02, 0x03, 0x12, 0x03, 0x21, 0x08, 0x36, 0x22, 0x61, 0x21, 0x20, 0x53, 0x69, 0x74, 0x75,
    0x61, 0xc3, 0xa7, 0xc3, 0xa3, 0x6f, 0x20, 0x65, 0x6d, 0x20, 0x71, 0x75, 0x65, 0x20, 0x73, 0x65,
    0x20, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x20, 0x6f, 0x20, 0x63, 0x6f, 0x6d, 0x61,
    0x6e, 0x64, 0x6f, 0x2e, 0x20, 0x4e, 0x6f, 0x20, 0x66, 0x75, 0x74, 0x75, 0x72, 0x6f, 0x20, 0x6f,
    0x73, 0x20, 0x72, 0x6f, 0x62, 0xc3, 0xb4, 0x73, 0x20, 0x73, 0x65, 0x72, 0xc3, 0xa3, 0x6f, 0x20,
    0x70, 0x6f, 0x73, 0x69, 0x63, 0x69, 0x6f, 0x6e, 0x61, 0x64, 0x6f, 0x73, 0x20, 0x61, 0x75, 0x74,
    0x6f, 0x6e, 0x6f, 0x6d, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x01, 0x02, 0x03, 0x04, 0x12, 0x03, 0x21, 0x08, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02,
    0x03, 0x05, 0x12, 0x03, 0x21, 0x11, 0x17, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x03, 0x01,
    0x12, 0x03, 0x21, 0x28, 0x31, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x03, 0x03, 0x12, 0x03,
    0x21, 0x34, 0x35, 0x0a, 0x1c, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x04, 0x12, 0x03, 0x22, 0x08, 0x31,
    0x22, 0x0f, 0x21, 0x20, 0x4e, 0x6f, 0x6d, 0x65, 0x20, 0x64, 0x6f, 0x20, 0x74, 0x69, 0x6d, 0x65,
    0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x04, 0x04, 0x12, 0x03, 0x22, 0x08, 0x10, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x04, 0x05, 0x12, 0x03, 0x22, 0x11, 0x17, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x01, 0x02, 0x04, 0x01, 0x12, 0x03, 0x22, 0x28, 0x2c, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x01, 0x02, 0x04, 0x03, 0x12, 0x03, 0x22, 0x2f, 0x30,
];

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
