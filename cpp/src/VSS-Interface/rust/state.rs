// This file is generated. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(Clone,Default)]
pub struct RGB {
    // message fields
    r: ::std::option::Option<u32>,
    g: ::std::option::Option<u32>,
    b: ::std::option::Option<u32>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for RGB {}

impl RGB {
    pub fn new() -> RGB {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static RGB {
        static mut instance: ::protobuf::lazy::Lazy<RGB> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RGB,
        };
        unsafe {
            instance.get(|| {
                RGB {
                    r: ::std::option::Option::None,
                    g: ::std::option::Option::None,
                    b: ::std::option::Option::None,
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // required uint32 r = 1;

    pub fn clear_r(&mut self) {
        self.r = ::std::option::Option::None;
    }

    pub fn has_r(&self) -> bool {
        self.r.is_some()
    }

    // Param is passed by value, moved
    pub fn set_r(&mut self, v: u32) {
        self.r = ::std::option::Option::Some(v);
    }

    pub fn get_r(&self) -> u32 {
        self.r.unwrap_or(0)
    }

    // required uint32 g = 2;

    pub fn clear_g(&mut self) {
        self.g = ::std::option::Option::None;
    }

    pub fn has_g(&self) -> bool {
        self.g.is_some()
    }

    // Param is passed by value, moved
    pub fn set_g(&mut self, v: u32) {
        self.g = ::std::option::Option::Some(v);
    }

    pub fn get_g(&self) -> u32 {
        self.g.unwrap_or(0)
    }

    // required uint32 b = 3;

    pub fn clear_b(&mut self) {
        self.b = ::std::option::Option::None;
    }

    pub fn has_b(&self) -> bool {
        self.b.is_some()
    }

    // Param is passed by value, moved
    pub fn set_b(&mut self, v: u32) {
        self.b = ::std::option::Option::Some(v);
    }

    pub fn get_b(&self) -> u32 {
        self.b.unwrap_or(0)
    }
}

impl ::protobuf::Message for RGB {
    fn is_initialized(&self) -> bool {
        if self.r.is_none() {
            return false;
        };
        if self.g.is_none() {
            return false;
        };
        if self.b.is_none() {
            return false;
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_uint32());
                    self.r = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_uint32());
                    self.g = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_uint32());
                    self.b = ::std::option::Option::Some(tmp);
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.r {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.g {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.b {
            my_size += ::protobuf::rt::value_size(3, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.r {
            try!(os.write_uint32(1, v));
        };
        if let Some(v) = self.g {
            try!(os.write_uint32(2, v));
        };
        if let Some(v) = self.b {
            try!(os.write_uint32(3, v));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<RGB>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for RGB {
    fn new() -> RGB {
        RGB::new()
    }

    fn descriptor_static(_: ::std::option::Option<RGB>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_u32_accessor(
                    "r",
                    RGB::has_r,
                    RGB::get_r,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_u32_accessor(
                    "g",
                    RGB::has_g,
                    RGB::get_g,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_u32_accessor(
                    "b",
                    RGB::has_b,
                    RGB::get_b,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RGB>(
                    "RGB",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for RGB {
    fn clear(&mut self) {
        self.clear_r();
        self.clear_g();
        self.clear_b();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for RGB {
    fn eq(&self, other: &RGB) -> bool {
        self.r == other.r &&
        self.g == other.g &&
        self.b == other.b &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for RGB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct Pose {
    // message fields
    x: ::std::option::Option<f32>,
    y: ::std::option::Option<f32>,
    yaw: ::std::option::Option<f32>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for Pose {}

impl Pose {
    pub fn new() -> Pose {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static Pose {
        static mut instance: ::protobuf::lazy::Lazy<Pose> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Pose,
        };
        unsafe {
            instance.get(|| {
                Pose {
                    x: ::std::option::Option::None,
                    y: ::std::option::Option::None,
                    yaw: ::std::option::Option::None,
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // required float x = 1;

    pub fn clear_x(&mut self) {
        self.x = ::std::option::Option::None;
    }

    pub fn has_x(&self) -> bool {
        self.x.is_some()
    }

    // Param is passed by value, moved
    pub fn set_x(&mut self, v: f32) {
        self.x = ::std::option::Option::Some(v);
    }

    pub fn get_x(&self) -> f32 {
        self.x.unwrap_or(0.)
    }

    // required float y = 2;

    pub fn clear_y(&mut self) {
        self.y = ::std::option::Option::None;
    }

    pub fn has_y(&self) -> bool {
        self.y.is_some()
    }

    // Param is passed by value, moved
    pub fn set_y(&mut self, v: f32) {
        self.y = ::std::option::Option::Some(v);
    }

    pub fn get_y(&self) -> f32 {
        self.y.unwrap_or(0.)
    }

    // optional float yaw = 3;

    pub fn clear_yaw(&mut self) {
        self.yaw = ::std::option::Option::None;
    }

    pub fn has_yaw(&self) -> bool {
        self.yaw.is_some()
    }

    // Param is passed by value, moved
    pub fn set_yaw(&mut self, v: f32) {
        self.yaw = ::std::option::Option::Some(v);
    }

    pub fn get_yaw(&self) -> f32 {
        self.yaw.unwrap_or(0.)
    }
}

impl ::protobuf::Message for Pose {
    fn is_initialized(&self) -> bool {
        if self.x.is_none() {
            return false;
        };
        if self.y.is_none() {
            return false;
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_float());
                    self.x = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_float());
                    self.y = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_float());
                    self.yaw = ::std::option::Option::Some(tmp);
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.x.is_some() {
            my_size += 5;
        };
        if self.y.is_some() {
            my_size += 5;
        };
        if self.yaw.is_some() {
            my_size += 5;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.x {
            try!(os.write_float(1, v));
        };
        if let Some(v) = self.y {
            try!(os.write_float(2, v));
        };
        if let Some(v) = self.yaw {
            try!(os.write_float(3, v));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<Pose>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for Pose {
    fn new() -> Pose {
        Pose::new()
    }

    fn descriptor_static(_: ::std::option::Option<Pose>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_f32_accessor(
                    "x",
                    Pose::has_x,
                    Pose::get_x,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_f32_accessor(
                    "y",
                    Pose::has_y,
                    Pose::get_y,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_f32_accessor(
                    "yaw",
                    Pose::has_yaw,
                    Pose::get_yaw,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Pose>(
                    "Pose",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for Pose {
    fn clear(&mut self) {
        self.clear_x();
        self.clear_y();
        self.clear_yaw();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for Pose {
    fn eq(&self, other: &Pose) -> bool {
        self.x == other.x &&
        self.y == other.y &&
        self.yaw == other.yaw &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for Pose {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct Ball_State {
    // message fields
    pose: ::protobuf::SingularPtrField<Pose>,
    v_pose: ::protobuf::SingularPtrField<Pose>,
    k_pose: ::protobuf::SingularPtrField<Pose>,
    k_v_pose: ::protobuf::SingularPtrField<Pose>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for Ball_State {}

impl Ball_State {
    pub fn new() -> Ball_State {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static Ball_State {
        static mut instance: ::protobuf::lazy::Lazy<Ball_State> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Ball_State,
        };
        unsafe {
            instance.get(|| {
                Ball_State {
                    pose: ::protobuf::SingularPtrField::none(),
                    v_pose: ::protobuf::SingularPtrField::none(),
                    k_pose: ::protobuf::SingularPtrField::none(),
                    k_v_pose: ::protobuf::SingularPtrField::none(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // required .vss_state.Pose pose = 1;

    pub fn clear_pose(&mut self) {
        self.pose.clear();
    }

    pub fn has_pose(&self) -> bool {
        self.pose.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pose(&mut self, v: Pose) {
        self.pose = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pose(&mut self) -> &mut Pose {
        if self.pose.is_none() {
            self.pose.set_default();
        };
        self.pose.as_mut().unwrap()
    }

    // Take field
    pub fn take_pose(&mut self) -> Pose {
        self.pose.take().unwrap_or_else(|| Pose::new())
    }

    pub fn get_pose(&self) -> &Pose {
        self.pose.as_ref().unwrap_or_else(|| Pose::default_instance())
    }

    // optional .vss_state.Pose v_pose = 2;

    pub fn clear_v_pose(&mut self) {
        self.v_pose.clear();
    }

    pub fn has_v_pose(&self) -> bool {
        self.v_pose.is_some()
    }

    // Param is passed by value, moved
    pub fn set_v_pose(&mut self, v: Pose) {
        self.v_pose = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_v_pose(&mut self) -> &mut Pose {
        if self.v_pose.is_none() {
            self.v_pose.set_default();
        };
        self.v_pose.as_mut().unwrap()
    }

    // Take field
    pub fn take_v_pose(&mut self) -> Pose {
        self.v_pose.take().unwrap_or_else(|| Pose::new())
    }

    pub fn get_v_pose(&self) -> &Pose {
        self.v_pose.as_ref().unwrap_or_else(|| Pose::default_instance())
    }

    // optional .vss_state.Pose k_pose = 3;

    pub fn clear_k_pose(&mut self) {
        self.k_pose.clear();
    }

    pub fn has_k_pose(&self) -> bool {
        self.k_pose.is_some()
    }

    // Param is passed by value, moved
    pub fn set_k_pose(&mut self, v: Pose) {
        self.k_pose = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_k_pose(&mut self) -> &mut Pose {
        if self.k_pose.is_none() {
            self.k_pose.set_default();
        };
        self.k_pose.as_mut().unwrap()
    }

    // Take field
    pub fn take_k_pose(&mut self) -> Pose {
        self.k_pose.take().unwrap_or_else(|| Pose::new())
    }

    pub fn get_k_pose(&self) -> &Pose {
        self.k_pose.as_ref().unwrap_or_else(|| Pose::default_instance())
    }

    // optional .vss_state.Pose k_v_pose = 4;

    pub fn clear_k_v_pose(&mut self) {
        self.k_v_pose.clear();
    }

    pub fn has_k_v_pose(&self) -> bool {
        self.k_v_pose.is_some()
    }

    // Param is passed by value, moved
    pub fn set_k_v_pose(&mut self, v: Pose) {
        self.k_v_pose = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_k_v_pose(&mut self) -> &mut Pose {
        if self.k_v_pose.is_none() {
            self.k_v_pose.set_default();
        };
        self.k_v_pose.as_mut().unwrap()
    }

    // Take field
    pub fn take_k_v_pose(&mut self) -> Pose {
        self.k_v_pose.take().unwrap_or_else(|| Pose::new())
    }

    pub fn get_k_v_pose(&self) -> &Pose {
        self.k_v_pose.as_ref().unwrap_or_else(|| Pose::default_instance())
    }
}

impl ::protobuf::Message for Ball_State {
    fn is_initialized(&self) -> bool {
        if self.pose.is_none() {
            return false;
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pose));
                },
                2 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.v_pose));
                },
                3 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.k_pose));
                },
                4 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.k_v_pose));
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.pose {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.v_pose {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.k_pose {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.k_v_pose {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.pose.as_ref() {
            try!(os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.v_pose.as_ref() {
            try!(os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.k_pose.as_ref() {
            try!(os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.k_v_pose.as_ref() {
            try!(os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<Ball_State>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for Ball_State {
    fn new() -> Ball_State {
        Ball_State::new()
    }

    fn descriptor_static(_: ::std::option::Option<Ball_State>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "pose",
                    Ball_State::has_pose,
                    Ball_State::get_pose,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "v_pose",
                    Ball_State::has_v_pose,
                    Ball_State::get_v_pose,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "k_pose",
                    Ball_State::has_k_pose,
                    Ball_State::get_k_pose,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "k_v_pose",
                    Ball_State::has_k_v_pose,
                    Ball_State::get_k_v_pose,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Ball_State>(
                    "Ball_State",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for Ball_State {
    fn clear(&mut self) {
        self.clear_pose();
        self.clear_v_pose();
        self.clear_k_pose();
        self.clear_k_v_pose();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for Ball_State {
    fn eq(&self, other: &Ball_State) -> bool {
        self.pose == other.pose &&
        self.v_pose == other.v_pose &&
        self.k_pose == other.k_pose &&
        self.k_v_pose == other.k_v_pose &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for Ball_State {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct Robot_State {
    // message fields
    pose: ::protobuf::SingularPtrField<Pose>,
    v_pose: ::protobuf::SingularPtrField<Pose>,
    k_pose: ::protobuf::SingularPtrField<Pose>,
    k_v_pose: ::protobuf::SingularPtrField<Pose>,
    color: ::protobuf::SingularPtrField<RGB>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for Robot_State {}

impl Robot_State {
    pub fn new() -> Robot_State {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static Robot_State {
        static mut instance: ::protobuf::lazy::Lazy<Robot_State> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Robot_State,
        };
        unsafe {
            instance.get(|| {
                Robot_State {
                    pose: ::protobuf::SingularPtrField::none(),
                    v_pose: ::protobuf::SingularPtrField::none(),
                    k_pose: ::protobuf::SingularPtrField::none(),
                    k_v_pose: ::protobuf::SingularPtrField::none(),
                    color: ::protobuf::SingularPtrField::none(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // required .vss_state.Pose pose = 1;

    pub fn clear_pose(&mut self) {
        self.pose.clear();
    }

    pub fn has_pose(&self) -> bool {
        self.pose.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pose(&mut self, v: Pose) {
        self.pose = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pose(&mut self) -> &mut Pose {
        if self.pose.is_none() {
            self.pose.set_default();
        };
        self.pose.as_mut().unwrap()
    }

    // Take field
    pub fn take_pose(&mut self) -> Pose {
        self.pose.take().unwrap_or_else(|| Pose::new())
    }

    pub fn get_pose(&self) -> &Pose {
        self.pose.as_ref().unwrap_or_else(|| Pose::default_instance())
    }

    // optional .vss_state.Pose v_pose = 2;

    pub fn clear_v_pose(&mut self) {
        self.v_pose.clear();
    }

    pub fn has_v_pose(&self) -> bool {
        self.v_pose.is_some()
    }

    // Param is passed by value, moved
    pub fn set_v_pose(&mut self, v: Pose) {
        self.v_pose = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_v_pose(&mut self) -> &mut Pose {
        if self.v_pose.is_none() {
            self.v_pose.set_default();
        };
        self.v_pose.as_mut().unwrap()
    }

    // Take field
    pub fn take_v_pose(&mut self) -> Pose {
        self.v_pose.take().unwrap_or_else(|| Pose::new())
    }

    pub fn get_v_pose(&self) -> &Pose {
        self.v_pose.as_ref().unwrap_or_else(|| Pose::default_instance())
    }

    // optional .vss_state.Pose k_pose = 3;

    pub fn clear_k_pose(&mut self) {
        self.k_pose.clear();
    }

    pub fn has_k_pose(&self) -> bool {
        self.k_pose.is_some()
    }

    // Param is passed by value, moved
    pub fn set_k_pose(&mut self, v: Pose) {
        self.k_pose = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_k_pose(&mut self) -> &mut Pose {
        if self.k_pose.is_none() {
            self.k_pose.set_default();
        };
        self.k_pose.as_mut().unwrap()
    }

    // Take field
    pub fn take_k_pose(&mut self) -> Pose {
        self.k_pose.take().unwrap_or_else(|| Pose::new())
    }

    pub fn get_k_pose(&self) -> &Pose {
        self.k_pose.as_ref().unwrap_or_else(|| Pose::default_instance())
    }

    // optional .vss_state.Pose k_v_pose = 4;

    pub fn clear_k_v_pose(&mut self) {
        self.k_v_pose.clear();
    }

    pub fn has_k_v_pose(&self) -> bool {
        self.k_v_pose.is_some()
    }

    // Param is passed by value, moved
    pub fn set_k_v_pose(&mut self, v: Pose) {
        self.k_v_pose = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_k_v_pose(&mut self) -> &mut Pose {
        if self.k_v_pose.is_none() {
            self.k_v_pose.set_default();
        };
        self.k_v_pose.as_mut().unwrap()
    }

    // Take field
    pub fn take_k_v_pose(&mut self) -> Pose {
        self.k_v_pose.take().unwrap_or_else(|| Pose::new())
    }

    pub fn get_k_v_pose(&self) -> &Pose {
        self.k_v_pose.as_ref().unwrap_or_else(|| Pose::default_instance())
    }

    // optional .vss_state.RGB color = 5;

    pub fn clear_color(&mut self) {
        self.color.clear();
    }

    pub fn has_color(&self) -> bool {
        self.color.is_some()
    }

    // Param is passed by value, moved
    pub fn set_color(&mut self, v: RGB) {
        self.color = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_color(&mut self) -> &mut RGB {
        if self.color.is_none() {
            self.color.set_default();
        };
        self.color.as_mut().unwrap()
    }

    // Take field
    pub fn take_color(&mut self) -> RGB {
        self.color.take().unwrap_or_else(|| RGB::new())
    }

    pub fn get_color(&self) -> &RGB {
        self.color.as_ref().unwrap_or_else(|| RGB::default_instance())
    }
}

impl ::protobuf::Message for Robot_State {
    fn is_initialized(&self) -> bool {
        if self.pose.is_none() {
            return false;
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pose));
                },
                2 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.v_pose));
                },
                3 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.k_pose));
                },
                4 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.k_v_pose));
                },
                5 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.color));
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.pose {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.v_pose {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.k_pose {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.k_v_pose {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.color {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.pose.as_ref() {
            try!(os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.v_pose.as_ref() {
            try!(os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.k_pose.as_ref() {
            try!(os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.k_v_pose.as_ref() {
            try!(os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.color.as_ref() {
            try!(os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<Robot_State>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for Robot_State {
    fn new() -> Robot_State {
        Robot_State::new()
    }

    fn descriptor_static(_: ::std::option::Option<Robot_State>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "pose",
                    Robot_State::has_pose,
                    Robot_State::get_pose,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "v_pose",
                    Robot_State::has_v_pose,
                    Robot_State::get_v_pose,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "k_pose",
                    Robot_State::has_k_pose,
                    Robot_State::get_k_pose,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "k_v_pose",
                    Robot_State::has_k_v_pose,
                    Robot_State::get_k_v_pose,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "color",
                    Robot_State::has_color,
                    Robot_State::get_color,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Robot_State>(
                    "Robot_State",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for Robot_State {
    fn clear(&mut self) {
        self.clear_pose();
        self.clear_v_pose();
        self.clear_k_pose();
        self.clear_k_v_pose();
        self.clear_color();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for Robot_State {
    fn eq(&self, other: &Robot_State) -> bool {
        self.pose == other.pose &&
        self.v_pose == other.v_pose &&
        self.k_pose == other.k_pose &&
        self.k_v_pose == other.k_v_pose &&
        self.color == other.color &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for Robot_State {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct Global_State {
    // message fields
    id: ::std::option::Option<u32>,
    origin: ::std::option::Option<bool>,
    balls: ::protobuf::RepeatedField<Ball_State>,
    robots_yellow: ::protobuf::RepeatedField<Robot_State>,
    robots_blue: ::protobuf::RepeatedField<Robot_State>,
    situation: ::std::option::Option<u32>,
    time: ::std::option::Option<u32>,
    goals_yellow: ::std::option::Option<u32>,
    goals_blue: ::std::option::Option<u32>,
    name_yellow: ::protobuf::SingularField<::std::string::String>,
    name_blue: ::protobuf::SingularField<::std::string::String>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for Global_State {}

impl Global_State {
    pub fn new() -> Global_State {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static Global_State {
        static mut instance: ::protobuf::lazy::Lazy<Global_State> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Global_State,
        };
        unsafe {
            instance.get(|| {
                Global_State {
                    id: ::std::option::Option::None,
                    origin: ::std::option::Option::None,
                    balls: ::protobuf::RepeatedField::new(),
                    robots_yellow: ::protobuf::RepeatedField::new(),
                    robots_blue: ::protobuf::RepeatedField::new(),
                    situation: ::std::option::Option::None,
                    time: ::std::option::Option::None,
                    goals_yellow: ::std::option::Option::None,
                    goals_blue: ::std::option::Option::None,
                    name_yellow: ::protobuf::SingularField::none(),
                    name_blue: ::protobuf::SingularField::none(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional uint32 id = 1;

    pub fn clear_id(&mut self) {
        self.id = ::std::option::Option::None;
    }

    pub fn has_id(&self) -> bool {
        self.id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u32) {
        self.id = ::std::option::Option::Some(v);
    }

    pub fn get_id(&self) -> u32 {
        self.id.unwrap_or(0)
    }

    // optional bool origin = 2;

    pub fn clear_origin(&mut self) {
        self.origin = ::std::option::Option::None;
    }

    pub fn has_origin(&self) -> bool {
        self.origin.is_some()
    }

    // Param is passed by value, moved
    pub fn set_origin(&mut self, v: bool) {
        self.origin = ::std::option::Option::Some(v);
    }

    pub fn get_origin(&self) -> bool {
        self.origin.unwrap_or(false)
    }

    // repeated .vss_state.Ball_State balls = 3;

    pub fn clear_balls(&mut self) {
        self.balls.clear();
    }

    // Param is passed by value, moved
    pub fn set_balls(&mut self, v: ::protobuf::RepeatedField<Ball_State>) {
        self.balls = v;
    }

    // Mutable pointer to the field.
    pub fn mut_balls(&mut self) -> &mut ::protobuf::RepeatedField<Ball_State> {
        &mut self.balls
    }

    // Take field
    pub fn take_balls(&mut self) -> ::protobuf::RepeatedField<Ball_State> {
        ::std::mem::replace(&mut self.balls, ::protobuf::RepeatedField::new())
    }

    pub fn get_balls(&self) -> &[Ball_State] {
        &self.balls
    }

    // repeated .vss_state.Robot_State robots_yellow = 4;

    pub fn clear_robots_yellow(&mut self) {
        self.robots_yellow.clear();
    }

    // Param is passed by value, moved
    pub fn set_robots_yellow(&mut self, v: ::protobuf::RepeatedField<Robot_State>) {
        self.robots_yellow = v;
    }

    // Mutable pointer to the field.
    pub fn mut_robots_yellow(&mut self) -> &mut ::protobuf::RepeatedField<Robot_State> {
        &mut self.robots_yellow
    }

    // Take field
    pub fn take_robots_yellow(&mut self) -> ::protobuf::RepeatedField<Robot_State> {
        ::std::mem::replace(&mut self.robots_yellow, ::protobuf::RepeatedField::new())
    }

    pub fn get_robots_yellow(&self) -> &[Robot_State] {
        &self.robots_yellow
    }

    // repeated .vss_state.Robot_State robots_blue = 5;

    pub fn clear_robots_blue(&mut self) {
        self.robots_blue.clear();
    }

    // Param is passed by value, moved
    pub fn set_robots_blue(&mut self, v: ::protobuf::RepeatedField<Robot_State>) {
        self.robots_blue = v;
    }

    // Mutable pointer to the field.
    pub fn mut_robots_blue(&mut self) -> &mut ::protobuf::RepeatedField<Robot_State> {
        &mut self.robots_blue
    }

    // Take field
    pub fn take_robots_blue(&mut self) -> ::protobuf::RepeatedField<Robot_State> {
        ::std::mem::replace(&mut self.robots_blue, ::protobuf::RepeatedField::new())
    }

    pub fn get_robots_blue(&self) -> &[Robot_State] {
        &self.robots_blue
    }

    // optional uint32 situation = 6;

    pub fn clear_situation(&mut self) {
        self.situation = ::std::option::Option::None;
    }

    pub fn has_situation(&self) -> bool {
        self.situation.is_some()
    }

    // Param is passed by value, moved
    pub fn set_situation(&mut self, v: u32) {
        self.situation = ::std::option::Option::Some(v);
    }

    pub fn get_situation(&self) -> u32 {
        self.situation.unwrap_or(0)
    }

    // optional uint32 time = 7;

    pub fn clear_time(&mut self) {
        self.time = ::std::option::Option::None;
    }

    pub fn has_time(&self) -> bool {
        self.time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time(&mut self, v: u32) {
        self.time = ::std::option::Option::Some(v);
    }

    pub fn get_time(&self) -> u32 {
        self.time.unwrap_or(0)
    }

    // optional uint32 goals_yellow = 8;

    pub fn clear_goals_yellow(&mut self) {
        self.goals_yellow = ::std::option::Option::None;
    }

    pub fn has_goals_yellow(&self) -> bool {
        self.goals_yellow.is_some()
    }

    // Param is passed by value, moved
    pub fn set_goals_yellow(&mut self, v: u32) {
        self.goals_yellow = ::std::option::Option::Some(v);
    }

    pub fn get_goals_yellow(&self) -> u32 {
        self.goals_yellow.unwrap_or(0)
    }

    // optional uint32 goals_blue = 9;

    pub fn clear_goals_blue(&mut self) {
        self.goals_blue = ::std::option::Option::None;
    }

    pub fn has_goals_blue(&self) -> bool {
        self.goals_blue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_goals_blue(&mut self, v: u32) {
        self.goals_blue = ::std::option::Option::Some(v);
    }

    pub fn get_goals_blue(&self) -> u32 {
        self.goals_blue.unwrap_or(0)
    }

    // optional string name_yellow = 10;

    pub fn clear_name_yellow(&mut self) {
        self.name_yellow.clear();
    }

    pub fn has_name_yellow(&self) -> bool {
        self.name_yellow.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name_yellow(&mut self, v: ::std::string::String) {
        self.name_yellow = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name_yellow(&mut self) -> &mut ::std::string::String {
        if self.name_yellow.is_none() {
            self.name_yellow.set_default();
        };
        self.name_yellow.as_mut().unwrap()
    }

    // Take field
    pub fn take_name_yellow(&mut self) -> ::std::string::String {
        self.name_yellow.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_name_yellow(&self) -> &str {
        match self.name_yellow.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional string name_blue = 11;

    pub fn clear_name_blue(&mut self) {
        self.name_blue.clear();
    }

    pub fn has_name_blue(&self) -> bool {
        self.name_blue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name_blue(&mut self, v: ::std::string::String) {
        self.name_blue = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name_blue(&mut self) -> &mut ::std::string::String {
        if self.name_blue.is_none() {
            self.name_blue.set_default();
        };
        self.name_blue.as_mut().unwrap()
    }

    // Take field
    pub fn take_name_blue(&mut self) -> ::std::string::String {
        self.name_blue.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_name_blue(&self) -> &str {
        match self.name_blue.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
}

impl ::protobuf::Message for Global_State {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_uint32());
                    self.id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_bool());
                    self.origin = ::std::option::Option::Some(tmp);
                },
                3 => {
                    try!(::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.balls));
                },
                4 => {
                    try!(::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.robots_yellow));
                },
                5 => {
                    try!(::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.robots_blue));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_uint32());
                    self.situation = ::std::option::Option::Some(tmp);
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_uint32());
                    self.time = ::std::option::Option::Some(tmp);
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_uint32());
                    self.goals_yellow = ::std::option::Option::Some(tmp);
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_uint32());
                    self.goals_blue = ::std::option::Option::Some(tmp);
                },
                10 => {
                    try!(::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.name_yellow));
                },
                11 => {
                    try!(::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.name_blue));
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.id {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if self.origin.is_some() {
            my_size += 2;
        };
        for value in &self.balls {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.robots_yellow {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.robots_blue {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.situation {
            my_size += ::protobuf::rt::value_size(6, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.time {
            my_size += ::protobuf::rt::value_size(7, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.goals_yellow {
            my_size += ::protobuf::rt::value_size(8, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.goals_blue {
            my_size += ::protobuf::rt::value_size(9, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.name_yellow {
            my_size += ::protobuf::rt::string_size(10, &value);
        };
        for value in &self.name_blue {
            my_size += ::protobuf::rt::string_size(11, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.id {
            try!(os.write_uint32(1, v));
        };
        if let Some(v) = self.origin {
            try!(os.write_bool(2, v));
        };
        for v in &self.balls {
            try!(os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        for v in &self.robots_yellow {
            try!(os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        for v in &self.robots_blue {
            try!(os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.situation {
            try!(os.write_uint32(6, v));
        };
        if let Some(v) = self.time {
            try!(os.write_uint32(7, v));
        };
        if let Some(v) = self.goals_yellow {
            try!(os.write_uint32(8, v));
        };
        if let Some(v) = self.goals_blue {
            try!(os.write_uint32(9, v));
        };
        if let Some(v) = self.name_yellow.as_ref() {
            try!(os.write_string(10, &v));
        };
        if let Some(v) = self.name_blue.as_ref() {
            try!(os.write_string(11, &v));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<Global_State>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for Global_State {
    fn new() -> Global_State {
        Global_State::new()
    }

    fn descriptor_static(_: ::std::option::Option<Global_State>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_u32_accessor(
                    "id",
                    Global_State::has_id,
                    Global_State::get_id,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor(
                    "origin",
                    Global_State::has_origin,
                    Global_State::get_origin,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_message_accessor(
                    "balls",
                    Global_State::get_balls,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_message_accessor(
                    "robots_yellow",
                    Global_State::get_robots_yellow,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_message_accessor(
                    "robots_blue",
                    Global_State::get_robots_blue,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_u32_accessor(
                    "situation",
                    Global_State::has_situation,
                    Global_State::get_situation,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_u32_accessor(
                    "time",
                    Global_State::has_time,
                    Global_State::get_time,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_u32_accessor(
                    "goals_yellow",
                    Global_State::has_goals_yellow,
                    Global_State::get_goals_yellow,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_u32_accessor(
                    "goals_blue",
                    Global_State::has_goals_blue,
                    Global_State::get_goals_blue,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor(
                    "name_yellow",
                    Global_State::has_name_yellow,
                    Global_State::get_name_yellow,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor(
                    "name_blue",
                    Global_State::has_name_blue,
                    Global_State::get_name_blue,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Global_State>(
                    "Global_State",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for Global_State {
    fn clear(&mut self) {
        self.clear_id();
        self.clear_origin();
        self.clear_balls();
        self.clear_robots_yellow();
        self.clear_robots_blue();
        self.clear_situation();
        self.clear_time();
        self.clear_goals_yellow();
        self.clear_goals_blue();
        self.clear_name_yellow();
        self.clear_name_blue();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for Global_State {
    fn eq(&self, other: &Global_State) -> bool {
        self.id == other.id &&
        self.origin == other.origin &&
        self.balls == other.balls &&
        self.robots_yellow == other.robots_yellow &&
        self.robots_blue == other.robots_blue &&
        self.situation == other.situation &&
        self.time == other.time &&
        self.goals_yellow == other.goals_yellow &&
        self.goals_blue == other.goals_blue &&
        self.name_yellow == other.name_yellow &&
        self.name_blue == other.name_blue &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for Global_State {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

static file_descriptor_proto_data: &'static [u8] = &[
    0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x76,
    0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x2f, 0x0a, 0x03, 0x52, 0x47, 0x42, 0x12,
    0x0c, 0x0a, 0x01, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x01, 0x72, 0x12, 0x0c, 0x0a,
    0x01, 0x67, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x01, 0x67, 0x12, 0x0c, 0x0a, 0x01, 0x62,
    0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x01, 0x62, 0x22, 0x34, 0x0a, 0x04, 0x50, 0x6f, 0x73,
    0x65, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12,
    0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x10, 0x0a,
    0x03, 0x79, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x79, 0x61, 0x77, 0x22,
    0xac, 0x01, 0x0a, 0x0a, 0x42, 0x61, 0x6c, 0x6c, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23,
    0x0a, 0x04, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76,
    0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x65, 0x52, 0x04, 0x70,
    0x6f, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x76, 0x5f, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20,
    0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
    0x50, 0x6f, 0x73, 0x65, 0x52, 0x05, 0x76, 0x50, 0x6f, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x6b,
    0x5f, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x73,
    0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x65, 0x52, 0x05, 0x6b, 0x50,
    0x6f, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x6b, 0x5f, 0x76, 0x5f, 0x70, 0x6f, 0x73, 0x65, 0x18,
    0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74,
    0x65, 0x2e, 0x50, 0x6f, 0x73, 0x65, 0x52, 0x06, 0x6b, 0x56, 0x50, 0x6f, 0x73, 0x65, 0x22, 0xd3,
    0x01, 0x0a, 0x0b, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23,
    0x0a, 0x04, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76,
    0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x65, 0x52, 0x04, 0x70,
    0x6f, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x76, 0x5f, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20,
    0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
    0x50, 0x6f, 0x73, 0x65, 0x52, 0x05, 0x76, 0x50, 0x6f, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x6b,
    0x5f, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x73,
    0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x65, 0x52, 0x05, 0x6b, 0x50,
    0x6f, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x6b, 0x5f, 0x76, 0x5f, 0x70, 0x6f, 0x73, 0x65, 0x18,
    0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74,
    0x65, 0x2e, 0x50, 0x6f, 0x73, 0x65, 0x52, 0x06, 0x6b, 0x56, 0x50, 0x6f, 0x73, 0x65, 0x12, 0x24,
    0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
    0x76, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x47, 0x42, 0x52, 0x05, 0x63,
    0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x8b, 0x03, 0x0a, 0x0c, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f,
    0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
    0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18,
    0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x2b, 0x0a,
    0x05, 0x62, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76,
    0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x42, 0x61, 0x6c, 0x6c, 0x5f, 0x53, 0x74,
    0x61, 0x74, 0x65, 0x52, 0x05, 0x62, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x3b, 0x0a, 0x0d, 0x72, 0x6f,
    0x62, 0x6f, 0x74, 0x73, 0x5f, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x03, 0x28,
    0x0b, 0x32, 0x16, 0x2e, 0x76, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x6f,
    0x62, 0x6f, 0x74, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x72, 0x6f, 0x62, 0x6f, 0x74,
    0x73, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x37, 0x0a, 0x0b, 0x72, 0x6f, 0x62, 0x6f, 0x74,
    0x73, 0x5f, 0x62, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76,
    0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x53,
    0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x73, 0x42, 0x6c, 0x75, 0x65,
    0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
    0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x69, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
    0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x69,
    0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x5f, 0x79, 0x65, 0x6c, 0x6c,
    0x6f, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x59,
    0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x5f, 0x62,
    0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x6f, 0x61, 0x6c, 0x73,
    0x42, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x79, 0x65, 0x6c,
    0x6c, 0x6f, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x59,
    0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x62, 0x6c,
    0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x6c,
    0x75, 0x65, 0x4a, 0x9d, 0x30, 0x0a, 0x06, 0x12, 0x04, 0x10, 0x00, 0x51, 0x01, 0x0a, 0xe2, 0x07,
    0x0a, 0x01, 0x02, 0x12, 0x03, 0x10, 0x08, 0x11, 0x1a, 0x66, 0x21, 0x20, 0x41, 0x71, 0x75, 0x69,
    0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x73, 0x65, 0x20, 0x75, 0x6d, 0x20, 0x70, 0x61,
    0x63, 0x6b, 0x61, 0x67, 0x65, 0x2c, 0x20, 0x71, 0x75, 0x65, 0x20, 0x6e, 0x61, 0x20, 0x70, 0x72,
    0x61, 0x74, 0x69, 0x63, 0x61, 0x20, 0x67, 0x65, 0x72, 0x61, 0x20, 0x75, 0x6d, 0x20, 0x6e, 0x61,
    0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x28, 0x43, 0x2b, 0x2b, 0x29, 0x20, 0x2d, 0x3e,
    0x20, 0x28, 0x21, 0x29, 0x20, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73,
    0x70, 0x61, 0x63, 0x65, 0x20, 0x76, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x3b, 0x0a,
    0x32, 0xfe, 0x01, 0x0a, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x69,
    0x73, 0x20, 0x70, 0x61, 0x72, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x56, 0x53,
    0x53, 0x2d, 0x53, 0x44, 0x4b, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x0a, 0x0a,
    0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x43, 0x6f, 0x64,
    0x65, 0x20, 0x46, 0x6f, 0x72, 0x6d, 0x20, 0x69, 0x73, 0x20, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
    0x74, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x20, 0x6f,
    0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x47, 0x4e, 0x55, 0x20, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41,
    0x4c, 0x20, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x20, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45,
    0x2c, 0x0a, 0x20, 0x76, 0x2e, 0x20, 0x33, 0x2e, 0x30, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x61, 0x20,
    0x63, 0x6f, 0x70, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x47, 0x50, 0x4c, 0x20,
    0x77, 0x61, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
    0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x69, 0x73, 0x0a, 0x20, 0x66,
    0x69, 0x6c, 0x65, 0x2c, 0x20, 0x59, 0x6f, 0x75, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x6f, 0x62, 0x74,
    0x61, 0x69, 0x6e, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a,
    0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6e, 0x75, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x69,
    0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x2f, 0x67, 0x70, 0x6c, 0x2d, 0x33, 0x2e, 0x30, 0x2f, 0x2e,
    0x0a, 0x32, 0xee, 0x04, 0x21, 0x20, 0x41, 0x71, 0x75, 0x69, 0x2c, 0x20, 0x65, 0x6e, 0x63, 0x6f,
    0x6e, 0x74, 0x72, 0x61, 0x2d, 0x73, 0x65, 0x20, 0x61, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
    0xc3, 0xa7, 0xc3, 0xa3, 0x6f, 0x20, 0x64, 0x6f, 0x20, 0x70, 0x61, 0x63, 0x6f, 0x74, 0x65, 0x20,
    0x64, 0x65, 0x20, 0x65, 0x73, 0x74, 0x61, 0x64, 0x6f, 0x20, 0x6e, 0x6f, 0x20, 0x66, 0x6f, 0x72,
    0x6d, 0x61, 0x74, 0x6f, 0x20, 0x64, 0x61, 0x20, 0x62, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x74, 0x65,
    0x63, 0x61, 0x20, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x20, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
    0x6f, 0x6c, 0x20, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x20, 0x28, 0x70, 0x72, 0x6f, 0x74,
    0x6f, 0x62, 0x75, 0x66, 0x29, 0x2e, 0x0a, 0x21, 0x20, 0x50, 0x61, 0x72, 0x61, 0x20, 0x6d, 0x61,
    0x69, 0x73, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0xc3, 0xa7, 0xc3, 0xb5, 0x65, 0x73,
    0x20, 0x73, 0x6f, 0x62, 0x72, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x3a,
    0x20, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
    0x65, 0x72, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70,
    0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x2f,
    0x0a, 0x21, 0x20, 0x45, 0x73, 0x73, 0x65, 0x20, 0x70, 0x61, 0x63, 0x6f, 0x74, 0x65, 0x20, 0xc3,
    0xa9, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0xc3, 0xa1, 0x76, 0x65, 0x6c, 0x20, 0x70,
    0x6f, 0x72, 0x20, 0x63, 0x61, 0x72, 0x72, 0x65, 0x67, 0x61, 0x72, 0x20, 0x74, 0x6f, 0x64, 0x61,
    0x73, 0x20, 0x61, 0x73, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0xc3, 0xa7, 0xc3, 0xb5,
    0x65, 0x73, 0x20, 0x61, 0x20, 0x63, 0x65, 0x72, 0x63, 0x61, 0x20, 0x64, 0x6f, 0x20, 0x65, 0x73,
    0x74, 0x61, 0x64, 0x6f, 0x20, 0x64, 0x6f, 0x20, 0x63, 0x61, 0x6d, 0x70, 0x6f, 0x2c, 0x20, 0x65,
    0x6d, 0x20, 0x6f, 0x75, 0x74, 0x72, 0x61, 0x73, 0x20, 0x70, 0x61, 0x6c, 0x61, 0x76, 0x72, 0x61,
    0x73, 0x2c, 0x0a, 0x21, 0x20, 0x70, 0x6f, 0x73, 0x69, 0xc3, 0xa7, 0xc3, 0xa3, 0x6f, 0x2c, 0x20,
    0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0xc3, 0xa7, 0xc3, 0xa3, 0x6f, 0x20, 0x65, 0x20, 0x76,
    0x65, 0x6c, 0x6f, 0x63, 0x69, 0x64, 0x61, 0x64, 0x65, 0x73, 0x20, 0x64, 0x65, 0x20, 0x74, 0x6f,
    0x64, 0x6f, 0x73, 0x20, 0x6f, 0x73, 0x20, 0x72, 0x6f, 0x62, 0xc3, 0xb4, 0x73, 0x20, 0x65, 0x6d,
    0x20, 0x63, 0x61, 0x6d, 0x70, 0x6f, 0x20, 0x65, 0x20, 0x64, 0x61, 0x20, 0x62, 0x6f, 0x6c, 0x61,
    0x2e, 0x20, 0x45, 0x73, 0x73, 0x65, 0x20, 0x70, 0x61, 0x63, 0x6f, 0x74, 0x65, 0x20, 0x70, 0x6f,
    0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x61, 0x20, 0x71, 0x75, 0x65, 0x20, 0x75, 0x6d,
    0x61, 0x0a, 0x21, 0x20, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0xc3, 0xa9, 0x67, 0x69, 0x61, 0x20,
    0x6f, 0x62, 0x74, 0x65, 0x6e, 0x68, 0x61, 0x20, 0x6f, 0x73, 0x20, 0x64, 0x61, 0x64, 0x6f, 0x73,
    0x20, 0x64, 0x6f, 0x20, 0x56, 0x53, 0x53, 0x2d, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x65,
    0x20, 0x56, 0x53, 0x53, 0x2d, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x2c, 0x20,
    0x70, 0x61, 0x72, 0x61, 0x20, 0x74, 0x61, 0x6c, 0x2c, 0x20, 0x6f, 0x20, 0x6d, 0x65, 0x73, 0x6d,
    0x6f, 0x20, 0x64, 0x65, 0x76, 0x65, 0x20, 0x73, 0x65, 0x72, 0x20, 0x70, 0x72, 0xc3, 0xa9, 0x63,
    0x6f, 0x6d, 0x70, 0xc3, 0xad, 0x6c, 0x61, 0x64, 0x6f, 0x20, 0x70, 0x61, 0x72, 0x61, 0x20, 0x75,
    0x6d, 0x61, 0x0a, 0x21, 0x20, 0x6c, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x6d, 0x20, 0x65,
    0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x20, 0x67, 0x65, 0x72, 0x61, 0x6e, 0x64,
    0x6f, 0x20, 0x75, 0x6d, 0x20, 0x74, 0x72, 0x65, 0x63, 0x68, 0x6f, 0x20, 0x64, 0x65, 0x20, 0x63,
    0xc3, 0xb3, 0x64, 0x69, 0x67, 0x6f, 0x20, 0x71, 0x75, 0x65, 0x20, 0x64, 0x65, 0x76, 0x65, 0x20,
    0x73, 0x65, 0x72, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x61, 0x64, 0x6f,
    0x2e, 0x0a, 0x0a, 0x8a, 0x02, 0x0a, 0x02, 0x04, 0x00, 0x12, 0x04, 0x15, 0x00, 0x19, 0x01, 0x1a,
    0xfd, 0x01, 0x21, 0x20, 0x45, 0x73, 0x73, 0x61, 0x20, 0x6d, 0x65, 0x6e, 0x73, 0x61, 0x67, 0x65,
    0x6d, 0x20, 0xc3, 0xa9, 0x20, 0x75, 0x6d, 0x61, 0x20, 0x73, 0x75, 0x62, 0x6d, 0x65, 0x6e, 0x73,
    0x61, 0x67, 0x65, 0x6d, 0x20, 0x64, 0x6f, 0x20, 0x70, 0x61, 0x63, 0x6f, 0x74, 0x65, 0x20, 0x47,
    0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x71, 0x75, 0x65, 0x20,
    0x64, 0x65, 0x20, 0x66, 0x61, 0x74, 0x6f, 0x20, 0xc3, 0xa9, 0x20, 0x65, 0x6e, 0x76, 0x69, 0x61,
    0x64, 0x6f, 0x2e, 0x20, 0x45, 0x73, 0x73, 0x61, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
    0xc3, 0xa7, 0xc3, 0xa3, 0x6f, 0x20, 0xc3, 0xa9, 0x20, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61,
    0x64, 0x61, 0x0a, 0x21, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x20, 0x70, 0x65, 0x6c,
    0x6f, 0x20, 0x56, 0x53, 0x53, 0x2d, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x70, 0x61,
    0x72, 0x61, 0x20, 0x65, 0x6e, 0x76, 0x69, 0x61, 0x72, 0x20, 0x6f, 0x73, 0x20, 0x76, 0x61, 0x6c,
    0x6f, 0x72, 0x65, 0x73, 0x20, 0x52, 0x47, 0x42, 0x20, 0x64, 0x61, 0x73, 0x20, 0x63, 0x6f, 0x72,
    0x65, 0x73, 0x20, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x64, 0x61, 0x73, 0x20, 0x70, 0x61,
    0x72, 0x61, 0x20, 0x6f, 0x20, 0x56, 0x53, 0x53, 0x2d, 0x56, 0x69, 0x65, 0x77, 0x65, 0x72, 0x2c,
    0x20, 0x61, 0x73, 0x73, 0x69, 0x6d, 0x20, 0x64, 0x65, 0x73, 0x65, 0x6e, 0x68, 0x61, 0x6e, 0x64,
    0x6f, 0x0a, 0x21, 0x20, 0x75, 0x6d, 0x20, 0x61, 0x6d, 0x62, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x20,
    0x6d, 0x61, 0x69, 0x73, 0x20, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x0a, 0x0a,
    0x0a, 0x0a, 0x03, 0x04, 0x00, 0x01, 0x12, 0x03, 0x15, 0x08, 0x0b, 0x0a, 0x1e, 0x0a, 0x04, 0x04,
    0x00, 0x02, 0x00, 0x12, 0x03, 0x16, 0x02, 0x1a, 0x22, 0x11, 0x21, 0x20, 0x56, 0x61, 0x6c, 0x6f,
    0x72, 0x20, 0x52, 0x20, 0x64, 0x65, 0x20, 0x52, 0x47, 0x42, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x00, 0x04, 0x12, 0x03, 0x16, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02,
    0x00, 0x05, 0x12, 0x03, 0x16, 0x0b, 0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x01,
    0x12, 0x03, 0x16, 0x14, 0x15, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x03, 0x12, 0x03,
    0x16, 0x18, 0x19, 0x0a, 0x1e, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x01, 0x12, 0x03, 0x17, 0x02, 0x1a,
    0x22, 0x11, 0x21, 0x20, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x20, 0x47, 0x20, 0x64, 0x65, 0x20, 0x52,
    0x47, 0x42, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x04, 0x12, 0x03, 0x17, 0x02,
    0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x05, 0x12, 0x03, 0x17, 0x0b, 0x11, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x17, 0x14, 0x15, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x01, 0x03, 0x12, 0x03, 0x17, 0x18, 0x19, 0x0a, 0x1e, 0x0a, 0x04, 0x04,
    0x00, 0x02, 0x02, 0x12, 0x03, 0x18, 0x02, 0x1a, 0x22, 0x11, 0x21, 0x20, 0x56, 0x61, 0x6c, 0x6f,
    0x72, 0x20, 0x42, 0x20, 0x64, 0x65, 0x20, 0x52, 0x47, 0x42, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x02, 0x04, 0x12, 0x03, 0x18, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02,
    0x02, 0x05, 0x12, 0x03, 0x18, 0x0b, 0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x01,
    0x12, 0x03, 0x18, 0x14, 0x15, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x03, 0x12, 0x03,
    0x18, 0x18, 0x19, 0x0a, 0x9b, 0x02, 0x0a, 0x02, 0x04, 0x01, 0x12, 0x04, 0x1e, 0x00, 0x22, 0x01,
    0x1a, 0x8e, 0x02, 0x21, 0x20, 0x45, 0x73, 0x73, 0x61, 0x20, 0x6d, 0x65, 0x6e, 0x73, 0x61, 0x67,
    0x65, 0x6d, 0x20, 0xc3, 0xa9, 0x20, 0x75, 0x6d, 0x61, 0x20, 0x73, 0x75, 0x62, 0x6d, 0x65, 0x6e,
    0x73, 0x61, 0x67, 0x65, 0x6d, 0x20, 0x64, 0x6f, 0x20, 0x70, 0x61, 0x63, 0x6f, 0x74, 0x65, 0x20,
    0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x71, 0x75, 0x65,
    0x20, 0x64, 0x65, 0x20, 0x66, 0x61, 0x74, 0x6f, 0x20, 0xc3, 0xa9, 0x20, 0x65, 0x6e, 0x76, 0x69,
    0x61, 0x64, 0x6f, 0x2e, 0x20, 0x45, 0x73, 0x73, 0x61, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
    0x61, 0xc3, 0xa7, 0xc3, 0xa3, 0x6f, 0x20, 0xc3, 0xa9, 0x20, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a,
    0x61, 0x64, 0x61, 0x20, 0x70, 0x61, 0x72, 0x61, 0x0a, 0x21, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65,
    0x73, 0x65, 0x74, 0x61, 0x72, 0x20, 0x75, 0x6d, 0x20, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x20, 0x72,
    0xc3, 0xad, 0x67, 0x69, 0x64, 0x6f, 0x20, 0x28, 0x6f, 0x62, 0x6a, 0x65, 0x74, 0x6f, 0x3a, 0x20,
    0x72, 0x6f, 0x62, 0xc3, 0xb4, 0x20, 0x6f, 0x75, 0x20, 0x62, 0x6f, 0x6c, 0x61, 0x29, 0x20, 0x65,
    0x6d, 0x20, 0x75, 0x6d, 0x20, 0x65, 0x73, 0x70, 0x61, 0xc3, 0xa7, 0x6f, 0x20, 0x64, 0x6f, 0x20,
    0x46, 0x75, 0x74, 0x65, 0x62, 0x6f, 0x6c, 0x20, 0x64, 0x65, 0x20, 0x52, 0x6f, 0x62, 0xc3, 0xb4,
    0x73, 0x2c, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x6f, 0x20, 0x6e, 0x65, 0x63, 0x65, 0x73, 0x73, 0xc3,
    0xa1, 0x72, 0x69, 0x6f, 0x20, 0x61, 0x70, 0x65, 0x6e, 0x61, 0x73, 0x3a, 0x0a, 0x21, 0x20, 0x70,
    0x6f, 0x73, 0x69, 0xc3, 0xa7, 0xc3, 0xa3, 0x6f, 0x20, 0x58, 0x20, 0x65, 0x20, 0x59, 0x20, 0x65,
    0x20, 0x72, 0x6f, 0x74, 0x61, 0xc3, 0xa7, 0xc3, 0xa3, 0x6f, 0x20, 0x65, 0x6d, 0x20, 0x5a, 0x2e,
    0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x01, 0x01, 0x12, 0x03, 0x1e, 0x08, 0x0c, 0x0a, 0x27, 0x0a,
    0x04, 0x04, 0x01, 0x02, 0x00, 0x12, 0x03, 0x1f, 0x02, 0x17, 0x22, 0x1a, 0x21, 0x20, 0x50, 0x6f,
    0x73, 0x69, 0xc3, 0xa7, 0xc3, 0xa3, 0x6f, 0x20, 0x65, 0x6d, 0x20, 0x58, 0x20, 0x64, 0x6f, 0x20,
    0x72, 0x6f, 0x62, 0xc3, 0xb4, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x04, 0x12,
    0x03, 0x1f, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x05, 0x12, 0x03, 0x1f,
    0x0b, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x01, 0x12, 0x03, 0x1f, 0x11, 0x12,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x03, 0x12, 0x03, 0x1f, 0x15, 0x16, 0x0a, 0x27,
    0x0a, 0x04, 0x04, 0x01, 0x02, 0x01, 0x12, 0x03, 0x20, 0x02, 0x17, 0x22, 0x1a, 0x21, 0x20, 0x50,
    0x6f, 0x73, 0x69, 0xc3, 0xa7, 0xc3, 0xa3, 0x6f, 0x20, 0x65, 0x6d, 0x20, 0x59, 0x20, 0x64, 0x6f,
    0x20, 0x72, 0x6f, 0x62, 0xc3, 0xb4, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x04,
    0x12, 0x03, 0x20, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x05, 0x12, 0x03,
    0x20, 0x0b, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x01, 0x12, 0x03, 0x20, 0x11,
    0x12, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x03, 0x12, 0x03, 0x20, 0x15, 0x16, 0x0a,
    0x9a, 0x01, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x02, 0x12, 0x03, 0x21, 0x02, 0x19, 0x22, 0x8c, 0x01,
    0x21, 0x20, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0xc3, 0xa7, 0xc3, 0xa3, 0x6f, 0x20, 0x65,
    0x6d, 0x20, 0x5a, 0x2e, 0x20, 0x53, 0x65, 0x6e, 0x64, 0x6f, 0x20, 0x65, 0x73, 0x73, 0x65, 0x20,
    0x4f, 0x50, 0x49, 0x43, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x20, 0x6e, 0x6f, 0x20, 0x70, 0x61, 0x63,
    0x6f, 0x74, 0x65, 0x2c, 0x20, 0x70, 0x6f, 0x69, 0x73, 0x20, 0x6e, 0xc3, 0xa3, 0x6f, 0x20, 0x73,
    0xc3, 0xa3, 0x6f, 0x20, 0x74, 0x6f, 0x64, 0x6f, 0x73, 0x20, 0x6f, 0x73, 0x20, 0x6f, 0x62, 0x6a,
    0x65, 0x74, 0x6f, 0x73, 0x20, 0x71, 0x75, 0x65, 0x20, 0x6e, 0x65, 0x63, 0x65, 0x73, 0x73, 0x69,
    0x74, 0x61, 0x6d, 0x20, 0x64, 0x65, 0x20, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0xc3, 0xa7,
    0xc3, 0xa3, 0x6f, 0x20, 0x70, 0x61, 0x72, 0x61, 0x20, 0x73, 0x65, 0x72, 0x20, 0x72, 0x65, 0x70,
    0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x64, 0x6f, 0x73, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x01, 0x02, 0x02, 0x04, 0x12, 0x03, 0x21, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01,
    0x02, 0x02, 0x05, 0x12, 0x03, 0x21, 0x0b, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x02,
    0x01, 0x12, 0x03, 0x21, 0x11, 0x14, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x02, 0x03, 0x12,
    0x03, 0x21, 0x17, 0x18, 0x0a, 0x92, 0x03, 0x0a, 0x02, 0x04, 0x02, 0x12, 0x04, 0x28, 0x00, 0x2d,
    0x01, 0x1a, 0x85, 0x03, 0x21, 0x20, 0x45, 0x73, 0x73, 0x61, 0x20, 0x6d, 0x65, 0x6e, 0x73, 0x61,
    0x67, 0x65, 0x6d, 0x20, 0xc3, 0xa9, 0x20, 0x75, 0x6d, 0x61, 0x20, 0x73, 0x75, 0x62, 0x6d, 0x65,
    0x6e, 0x73, 0x61, 0x67, 0x65, 0x6d, 0x20, 0x64, 0x6f, 0x20, 0x70, 0x61, 0x63, 0x6f, 0x74, 0x65,
    0x20, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x71, 0x75,
    0x65, 0x20, 0x64, 0x65, 0x20, 0x66, 0x61, 0x74, 0x6f, 0x20, 0xc3, 0xa9, 0x20, 0x65, 0x6e, 0x76,
    0x69, 0x61, 0x64, 0x6f, 0x2e, 0x20, 0x45, 0x73, 0x73, 0x61, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72,
    0x6d, 0x61, 0xc3, 0xa7, 0xc3, 0xa3, 0x6f, 0x20, 0xc3, 0xa9, 0x20, 0x75, 0x74, 0x69, 0x6c, 0x69,
    0x7a, 0x61, 0x64, 0x61, 0x20, 0x70, 0x61, 0x72, 0x61, 0x0a, 0x21, 0x20, 0x72, 0x65, 0x70, 0x72,
    0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x20, 0x75, 0x6d, 0x61, 0x20, 0x62, 0x6f, 0x6c, 0x61,
    0x20, 0x6e, 0x6f, 0x20, 0x65, 0x73, 0x70, 0x61, 0xc3, 0xa7, 0x6f, 0x20, 0x64, 0x6f, 0x20, 0x46,
    0x75, 0x74, 0x65, 0x62, 0x6f, 0x6c, 0x20, 0x64, 0x65, 0x20, 0x52, 0x6f, 0x62, 0xc3, 0xb4, 0x73,
    0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x6f, 0x3a, 0x20, 0x50, 0x6f, 0x73, 0x65,
    0x3b, 0x20, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x64, 0x61, 0x64, 0x65, 0x20, 0x6c, 0x69, 0x6e,
    0x65, 0x61, 0x72, 0x20, 0x65, 0x20, 0x74, 0x61, 0x6e, 0x67, 0x65, 0x6e, 0x63, 0x69, 0x61, 0x6c,
    0x3b, 0x20, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x76, 0x61, 0x0a, 0x21, 0x20, 0x64,
    0x61, 0x20, 0x50, 0x6f, 0x73, 0x65, 0x20, 0x70, 0x6f, 0x72, 0x20, 0x70, 0x61, 0x72, 0x74, 0x65,
    0x20, 0x64, 0x6f, 0x20, 0x46, 0x69, 0x6c, 0x74, 0x72, 0x6f, 0x20, 0x64, 0x65, 0x20, 0x4b, 0x61,
    0x6c, 0x6d, 0x61, 0x6e, 0x20, 0x28, 0x4e, 0x65, 0x63, 0x65, 0x73, 0x73, 0xc3, 0xa1, 0x72, 0x69,
    0x6f, 0x20, 0x65, 0x6d, 0x20, 0x61, 0x6d, 0x62, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x20, 0x72, 0x65,
    0x61, 0x6c, 0x20, 0x70, 0x65, 0x6c, 0x6f, 0x20, 0x56, 0x53, 0x53, 0x2d, 0x56, 0x69, 0x73, 0x69,
    0x6f, 0x6e, 0x29, 0x3b, 0x20, 0x65, 0x20, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x64, 0x61, 0x64,
    0x65, 0x20, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x20, 0x65, 0x20, 0x74, 0x61, 0x6e, 0x67, 0x65,
    0x6e, 0x63, 0x69, 0x61, 0x6c, 0x0a, 0x21, 0x20, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x64, 0x6f,
    0x73, 0x20, 0x70, 0x65, 0x6c, 0x6f, 0x20, 0x46, 0x69, 0x6c, 0x74, 0x72, 0x6f, 0x20, 0x64, 0x65,
    0x20, 0x4b, 0x61, 0x6c, 0x6d, 0x61, 0x6e, 0x2e, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x02, 0x01,
    0x12, 0x03, 0x28, 0x08, 0x12, 0x0a, 0x80, 0x01, 0x0a, 0x04, 0x04, 0x02, 0x02, 0x00, 0x12, 0x03,
    0x29, 0x02, 0x19, 0x22, 0x73, 0x21, 0x20, 0x50, 0x6f, 0x73, 0x69, 0xc3, 0xa7, 0xc3, 0xa3, 0x6f,
    0x20, 0x64, 0x65, 0x20, 0x75, 0x6d, 0x61, 0x20, 0x62, 0x6f, 0x6c, 0x61, 0x2e, 0x20, 0x53, 0x65,
    0x6e, 0x64, 0x6f, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x20, 0x65, 0x73, 0x73, 0x65,
    0x20, 0x6f, 0x20, 0x76, 0x61, 0x6c, 0x6f, 0x72, 0x20, 0x4f, 0x42, 0x52, 0x49, 0x47, 0x41, 0x54,
    0xc3, 0x93, 0x52, 0x49, 0x4f, 0x2c, 0x20, 0x70, 0x6f, 0x69, 0x73, 0x20, 0x6f, 0x73, 0x20, 0x6f,
    0x75, 0x74, 0x72, 0x6f, 0x73, 0x20, 0x65, 0x73, 0x74, 0xc3, 0xa3, 0x6f, 0x20, 0x73, 0x65, 0x6e,
    0x64, 0x6f, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x64, 0x6f, 0x73,
    0x20, 0x61, 0x69, 0x6e, 0x64, 0x61, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00,
    0x04, 0x12, 0x03, 0x29, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x06, 0x12,
    0x03, 0x29, 0x0b, 0x0f, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x01, 0x12, 0x03, 0x29,
    0x10, 0x14, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x03, 0x12, 0x03, 0x29, 0x17, 0x18,
    0x0a, 0x3a, 0x0a, 0x04, 0x04, 0x02, 0x02, 0x01, 0x12, 0x03, 0x2a, 0x02, 0x1b, 0x22, 0x2d, 0x21,
    0x20, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x64, 0x61, 0x64, 0x65, 0x20, 0x6c, 0x69, 0x6e, 0x65,
    0x61, 0x72, 0x20, 0x65, 0x20, 0x74, 0x61, 0x6e, 0x67, 0x65, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x20,
    0x64, 0x65, 0x20, 0x75, 0x6d, 0x61, 0x20, 0x62, 0x6f, 0x6c, 0x61, 0x0a, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x02, 0x02, 0x01, 0x04, 0x12, 0x03, 0x2a, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02,
    0x02, 0x01, 0x06, 0x12, 0x03, 0x2a, 0x0b, 0x0f, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x01,
    0x01, 0x12, 0x03, 0x2a, 0x10, 0x16, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x01, 0x03, 0x12,
    0x03, 0x2a, 0x19, 0x1a, 0x0a, 0x33, 0x0a, 0x04, 0x04, 0x02, 0x02, 0x02, 0x12, 0x03, 0x2b, 0x02,
    0x1b, 0x22, 0x26, 0x21, 0x20, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x76, 0x61, 0x20,
    0x64, 0x65, 0x20, 0x50, 0x6f, 0x73, 0x69, 0xc3, 0xa7, 0xc3, 0xa3, 0x6f, 0x20, 0x64, 0x65, 0x20,
    0x75, 0x6d, 0x61, 0x20, 0x62, 0x6f, 0x6c, 0x61, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02,
    0x02, 0x04, 0x12, 0x03, 0x2b, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x02, 0x06,
    0x12, 0x03, 0x2b, 0x0b, 0x0f, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x02, 0x01, 0x12, 0x03,
    0x2b, 0x10, 0x16, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x02, 0x03, 0x12, 0x03, 0x2b, 0x19,
    0x1a, 0x0a, 0x48, 0x0a, 0x04, 0x04, 0x02, 0x02, 0x03, 0x12, 0x03, 0x2c, 0x02, 0x1d, 0x22, 0x3b,
    0x21, 0x20, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x76, 0x61, 0x20, 0x64, 0x65, 0x20,
    0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x64, 0x61, 0x64, 0x65, 0x20, 0x6c, 0x69, 0x6e, 0x65, 0x61,
    0x72, 0x20, 0x65, 0x20, 0x74, 0x61, 0x6e, 0x67, 0x65, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x64,
    0x65, 0x20, 0x75, 0x6d, 0x61, 0x20, 0x62, 0x6f, 0x6c, 0x61, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x02, 0x02, 0x03, 0x04, 0x12, 0x03, 0x2c, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02,
    0x03, 0x06, 0x12, 0x03, 0x2c, 0x0b, 0x0f, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x03, 0x01,
    0x12, 0x03, 0x2c, 0x10, 0x18, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x03, 0x03, 0x12, 0x03,
    0x2c, 0x1b, 0x1c, 0x0a, 0xa4, 0x03, 0x0a, 0x02, 0x04, 0x03, 0x12, 0x04, 0x33, 0x00, 0x39, 0x01,
    0x1a, 0x97, 0x03, 0x21, 0x20, 0x45, 0x73, 0x73, 0x61, 0x20, 0x6d, 0x65, 0x6e, 0x73, 0x61, 0x67,
    0x65, 0x6d, 0x20, 0xc3, 0xa9, 0x20, 0x75, 0x6d, 0x61, 0x20, 0x73, 0x75, 0x62, 0x6d, 0x65, 0x6e,
    0x73, 0x61, 0x67, 0x65, 0x6d, 0x20, 0x64, 0x6f, 0x20, 0x70, 0x61, 0x63, 0x6f, 0x74, 0x65, 0x20,
    0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x71, 0x75, 0x65,
    0x20, 0x64, 0x65, 0x20, 0x66, 0x61, 0x74, 0x6f, 0x20, 0xc3, 0xa9, 0x20, 0x65, 0x6e, 0x76, 0x69,
    0x61, 0x64, 0x6f, 0x2e, 0x20, 0x45, 0x73, 0x73, 0x61, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
    0x61, 0xc3, 0xa7, 0xc3, 0xa3, 0x6f, 0x20, 0xc3, 0xa9, 0x20, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a,
    0x61, 0x64, 0x61, 0x20, 0x70, 0x61, 0x72, 0x61, 0x0a, 0x21, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65,
    0x73, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x20, 0x75, 0x6d, 0x20, 0x72, 0x6f, 0x62, 0x6f, 0x73, 0x20,
    0x6e, 0x6f, 0x20, 0x65, 0x73, 0x70, 0x61, 0xc3, 0xa7, 0x6f, 0x20, 0x64, 0x6f, 0x20, 0x46, 0x75,
    0x74, 0x65, 0x62, 0x6f, 0x6c, 0x20, 0x64, 0x65, 0x20, 0x52, 0x6f, 0x62, 0xc3, 0xb4, 0x73, 0x2c,
    0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x6f, 0x3a, 0x20, 0x50, 0x6f, 0x73, 0x65, 0x3b,
    0x20, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x64, 0x61, 0x64, 0x65, 0x20, 0x6c, 0x69, 0x6e, 0x65,
    0x61, 0x72, 0x2c, 0x20, 0x74, 0x61, 0x6e, 0x67, 0x65, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x65,
    0x20, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x3b, 0x0a, 0x21, 0x20, 0x45, 0x73, 0x74, 0x69,
    0x6d, 0x61, 0x74, 0x69, 0x76, 0x61, 0x20, 0x64, 0x61, 0x20, 0x50, 0x6f, 0x73, 0x65, 0x20, 0x70,
    0x6f, 0x72, 0x20, 0x70, 0x61, 0x72, 0x74, 0x65, 0x20, 0x64, 0x6f, 0x20, 0x46, 0x69, 0x6c, 0x74,
    0x72, 0x6f, 0x20, 0x64, 0x65, 0x20, 0x4b, 0x61, 0x6c, 0x6d, 0x61, 0x6e, 0x20, 0x28, 0x4e, 0x65,
    0x63, 0x65, 0x73, 0x73, 0xc3, 0xa1, 0x72, 0x69, 0x6f, 0x20, 0x65, 0x6d, 0x20, 0x61, 0x6d, 0x62,
    0x69, 0x65, 0x6e, 0x74, 0x65, 0x20, 0x72, 0x65, 0x61, 0x6c, 0x20, 0x70, 0x65, 0x6c, 0x6f, 0x20,
    0x56, 0x53, 0x53, 0x2d, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x29, 0x3b, 0x20, 0x65, 0x20, 0x56,
    0x65, 0x6c, 0x6f, 0x63, 0x69, 0x64, 0x61, 0x64, 0x65, 0x20, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72,
    0x2c, 0x0a, 0x21, 0x20, 0x74, 0x61, 0x6e, 0x67, 0x65, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x65,
    0x20, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x20, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x64,
    0x6f, 0x73, 0x20, 0x70, 0x65, 0x6c, 0x6f, 0x20, 0x46, 0x69, 0x6c, 0x74, 0x72, 0x6f, 0x20, 0x64,
    0x65, 0x20, 0x4b, 0x61, 0x6c, 0x6d, 0x61, 0x6e, 0x2e, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x03,
    0x01, 0x12, 0x03, 0x33, 0x08, 0x13, 0x0a, 0x90, 0x01, 0x0a, 0x04, 0x04, 0x03, 0x02, 0x00, 0x12,
    0x03, 0x34, 0x02, 0x1d, 0x22, 0x82, 0x01, 0x21, 0x20, 0x50, 0x6f, 0x73, 0x69, 0xc3, 0xa7, 0xc3,
    0xa3, 0x6f, 0x20, 0x65, 0x20, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0xc3, 0xa7, 0xc3, 0xa3,
    0x6f, 0x20, 0x64, 0x65, 0x20, 0x75, 0x6d, 0x20, 0x72, 0x6f, 0x62, 0xc3, 0xb4, 0x2e, 0x20, 0x53,
    0x65, 0x6e, 0x64, 0x6f, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x20, 0x65, 0x73, 0x73,
    0x65, 0x20, 0x6f, 0x20, 0x76, 0x61, 0x6c, 0x6f, 0x72, 0x20, 0x4f, 0x42, 0x52, 0x49, 0x47, 0x41,
    0x54, 0xc3, 0x93, 0x52, 0x49, 0x4f, 0x2c, 0x20, 0x70, 0x6f, 0x69, 0x73, 0x20, 0x6f, 0x73, 0x20,
    0x6f, 0x75, 0x74, 0x72, 0x6f, 0x73, 0x20, 0x65, 0x73, 0x74, 0xc3, 0xa3, 0x6f, 0x20, 0x73, 0x65,
    0x6e, 0x64, 0x6f, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x64, 0x6f,
    0x73, 0x20, 0x61, 0x69, 0x6e, 0x64, 0x61, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02,
    0x00, 0x04, 0x12, 0x03, 0x34, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00, 0x06,
    0x12, 0x03, 0x34, 0x0b, 0x0f, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00, 0x01, 0x12, 0x03,
    0x34, 0x14, 0x18, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00, 0x03, 0x12, 0x03, 0x34, 0x1b,
    0x1c, 0x0a, 0x43, 0x0a, 0x04, 0x04, 0x03, 0x02, 0x01, 0x12, 0x03, 0x35, 0x02, 0x1f, 0x22, 0x36,
    0x21, 0x20, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x64, 0x61, 0x64, 0x65, 0x20, 0x6c, 0x69, 0x6e,
    0x65, 0x61, 0x72, 0x2c, 0x20, 0x74, 0x61, 0x6e, 0x67, 0x65, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x20,
    0x65, 0x20, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x20, 0x64, 0x65, 0x20, 0x75, 0x6d, 0x20,
    0x72, 0x6f, 0x62, 0xc3, 0xb4, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x01, 0x04, 0x12,
    0x03, 0x35, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x01, 0x06, 0x12, 0x03, 0x35,
    0x0b, 0x0f, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x01, 0x01, 0x12, 0x03, 0x35, 0x14, 0x1a,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x01, 0x03, 0x12, 0x03, 0x35, 0x1d, 0x1e, 0x0a, 0x54,
    0x0a, 0x04, 0x04, 0x03, 0x02, 0x02, 0x12, 0x03, 0x36, 0x02, 0x1f, 0x22, 0x47, 0x21, 0x20, 0x50,
    0x6f, 0x73, 0x69, 0xc3, 0xa7, 0xc3, 0xa3, 0x6f, 0x20, 0x65, 0x20, 0x4f, 0x72, 0x69, 0x65, 0x6e,
    0x74, 0x61, 0xc3, 0xa7, 0xc3, 0xa3, 0x6f, 0x20, 0x64, 0x65, 0x20, 0x75, 0x6d, 0x20, 0x72, 0x6f,
    0x62, 0xc3, 0xb4, 0x20, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x64, 0x6f, 0x73, 0x20, 0x70, 0x65,
    0x6c, 0x6f, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x72, 0x6f, 0x20, 0x64, 0x65, 0x20, 0x6b, 0x61, 0x6c,
    0x6d, 0x61, 0x6e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x02, 0x04, 0x12, 0x03, 0x36,
    0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x02, 0x06, 0x12, 0x03, 0x36, 0x0b, 0x0f,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x02, 0x01, 0x12, 0x03, 0x36, 0x14, 0x1a, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x03, 0x02, 0x02, 0x03, 0x12, 0x03, 0x36, 0x1d, 0x1e, 0x0a, 0x57, 0x0a, 0x04,
    0x04, 0x03, 0x02, 0x03, 0x12, 0x03, 0x37, 0x02, 0x21, 0x22, 0x4a, 0x21, 0x20, 0x56, 0x65, 0x6c,
    0x6f, 0x63, 0x69, 0x64, 0x61, 0x64, 0x65, 0x20, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x2c, 0x20,
    0x74, 0x61, 0x6e, 0x67, 0x65, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x65, 0x20, 0x61, 0x6e, 0x67,
    0x75, 0x6c, 0x61, 0x72, 0x20, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x64, 0x6f, 0x73, 0x20, 0x70,
    0x65, 0x6c, 0x6f, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x72, 0x6f, 0x20, 0x64, 0x65, 0x20, 0x6b, 0x61,
    0x6c, 0x6d, 0x61, 0x6e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x03, 0x04, 0x12, 0x03,
    0x37, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x03, 0x06, 0x12, 0x03, 0x37, 0x0b,
    0x0f, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x03, 0x01, 0x12, 0x03, 0x37, 0x14, 0x1c, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x03, 0x03, 0x12, 0x03, 0x37, 0x1f, 0x20, 0x0a, 0x4d, 0x0a,
    0x04, 0x04, 0x03, 0x02, 0x04, 0x12, 0x03, 0x38, 0x02, 0x24, 0x22, 0x40, 0x21, 0x20, 0x43, 0x6f,
    0x72, 0x20, 0x64, 0x61, 0x20, 0x65, 0x74, 0x69, 0x71, 0x75, 0x65, 0x74, 0x61, 0x20, 0x73, 0x65,
    0x63, 0x75, 0x6e, 0x64, 0xc3, 0xa1, 0x72, 0x69, 0x61, 0x20, 0x64, 0x65, 0x20, 0x75, 0x6d, 0x20,
    0x72, 0x6f, 0x62, 0xc3, 0xb4, 0x20, 0x28, 0x53, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x20, 0x56,
    0x53, 0x53, 0x2d, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x29, 0x09, 0x0a, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x03, 0x02, 0x04, 0x04, 0x12, 0x03, 0x38, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03,
    0x02, 0x04, 0x06, 0x12, 0x03, 0x38, 0x0b, 0x0e, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x04,
    0x01, 0x12, 0x03, 0x38, 0x1a, 0x1f, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x04, 0x03, 0x12,
    0x03, 0x38, 0x22, 0x23, 0x0a, 0x51, 0x0a, 0x02, 0x04, 0x04, 0x12, 0x04, 0x3c, 0x00, 0x51, 0x01,
    0x1a, 0x45, 0x21, 0x20, 0x45, 0x73, 0x73, 0x61, 0x20, 0xc3, 0xa9, 0x20, 0x61, 0x20, 0x6d, 0x65,
    0x6e, 0x73, 0x61, 0x67, 0x65, 0x6d, 0x20, 0x71, 0x75, 0x65, 0x20, 0xc3, 0xa9, 0x20, 0x65, 0x6e,
    0x76, 0x69, 0x61, 0x64, 0x61, 0x20, 0x70, 0x65, 0x6c, 0x6f, 0x20, 0x56, 0x53, 0x53, 0x2d, 0x56,
    0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x65, 0x20, 0x56, 0x53, 0x53, 0x2d, 0x53, 0x69, 0x6d, 0x75,
    0x6c, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x04, 0x01, 0x12, 0x03,
    0x3c, 0x08, 0x14, 0x0a, 0x9d, 0x01, 0x0a, 0x04, 0x04, 0x04, 0x02, 0x00, 0x12, 0x03, 0x3d, 0x02,
    0x1f, 0x22, 0x8f, 0x01, 0x21, 0x20, 0x49, 0x44, 0x20, 0x64, 0x61, 0x20, 0x6d, 0x65, 0x6e, 0x73,
    0x61, 0x67, 0x65, 0x6d, 0x2c, 0x20, 0x70, 0x6f, 0x64, 0x65, 0x20, 0x73, 0x65, 0x72, 0x20, 0x65,
    0x6e, 0x76, 0x69, 0x61, 0x64, 0x6f, 0x20, 0x63, 0x6f, 0x6d, 0x6f, 0x20, 0x63, 0x6f, 0x6e, 0x74,
    0x72, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x20, 0x70, 0x61, 0x72, 0x61, 0x20, 0x76, 0x65,
    0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x72, 0x20, 0x73, 0x65, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x6d,
    0x75, 0x6e, 0x69, 0x63, 0x61, 0xc3, 0xa7, 0xc3, 0xa3, 0x6f, 0x20, 0x65, 0x73, 0x74, 0xc3, 0xa1,
    0x20, 0x73, 0x69, 0x6e, 0x63, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x61, 0x64, 0x61, 0x2e, 0x20, 0x53,
    0x65, 0x6e, 0x64, 0x65, 0x20, 0x65, 0x73, 0x74, 0x65, 0x20, 0x6f, 0x20, 0xc3, 0xba, 0x6e, 0x69,
    0x63, 0x6f, 0x20, 0x76, 0x61, 0x6c, 0x6f, 0x72, 0x20, 0x4f, 0x50, 0x49, 0x43, 0x49, 0x4f, 0x4e,
    0x41, 0x4c, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x00, 0x04, 0x12, 0x03, 0x3d, 0x02,
    0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x00, 0x05, 0x12, 0x03, 0x3d, 0x0b, 0x11, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x00, 0x01, 0x12, 0x03, 0x3d, 0x18, 0x1a, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x04, 0x02, 0x00, 0x03, 0x12, 0x03, 0x3d, 0x1d, 0x1e, 0x0a, 0x8c, 0x01, 0x0a, 0x04,
    0x04, 0x04, 0x02, 0x01, 0x12, 0x03, 0x3e, 0x02, 0x2f, 0x22, 0x7f, 0x21, 0x20, 0x42, 0x6f, 0x6f,
    0x6c, 0x65, 0x61, 0x6e, 0x6f, 0x20, 0x71, 0x75, 0x65, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
    0x20, 0x61, 0x20, 0x6f, 0x72, 0x69, 0x67, 0x65, 0x6d, 0x20, 0x64, 0x61, 0x20, 0x6d, 0x65, 0x6e,
    0x73, 0x61, 0x67, 0x65, 0x6d, 0x2e, 0x20, 0x43, 0x61, 0x73, 0x6f, 0x20, 0x54, 0x52, 0x55, 0x45,
    0x20, 0x61, 0x20, 0x6d, 0x65, 0x6e, 0x73, 0x61, 0x67, 0x65, 0x6d, 0x20, 0x76, 0x65, 0x6d, 0x20,
    0x64, 0x6f, 0x20, 0x56, 0x53, 0x53, 0x2d, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x63,
    0x61, 0x73, 0x6f, 0x20, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x20, 0x61, 0x20, 0x6d, 0x65, 0x6e, 0x73,
    0x61, 0x67, 0x65, 0x6d, 0x20, 0x76, 0x65, 0x6d, 0x20, 0x64, 0x6f, 0x20, 0x56, 0x53, 0x53, 0x2d,
    0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04,
    0x02, 0x01, 0x04, 0x12, 0x03, 0x3e, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x01,
    0x05, 0x12, 0x03, 0x3e, 0x0b, 0x0f, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x01, 0x01, 0x12,
    0x03, 0x3e, 0x24, 0x2a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x01, 0x03, 0x12, 0x03, 0x3e,
    0x2d, 0x2e, 0x0a, 0xad, 0x01, 0x0a, 0x04, 0x04, 0x04, 0x02, 0x02, 0x12, 0x03, 0x3f, 0x02, 0x22,
    0x22, 0x9f, 0x01, 0x21, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x61, 0x20, 0x64, 0x69, 0x6e, 0xc3, 0xa2,
    0x6d, 0x69, 0x63, 0x61, 0x20, 0x64, 0x65, 0x20, 0x62, 0x6f, 0x6c, 0x61, 0x73, 0x2e, 0x20, 0x45,
    0x73, 0x74, 0x61, 0x20, 0x70, 0x61, 0x72, 0x74, 0x65, 0x20, 0xc3, 0xa9, 0x20, 0x64, 0x65, 0x66,
    0x69, 0x6e, 0x69, 0x64, 0x61, 0x20, 0x64, 0x69, 0x6e, 0xc3, 0xa2, 0x6d, 0x69, 0x63, 0x61, 0x6d,
    0x65, 0x6e, 0x74, 0x65, 0x2c, 0x20, 0x70, 0x6f, 0x69, 0x73, 0x20, 0x70, 0x6f, 0x64, 0x65, 0x6d,
    0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x72, 0x20, 0x73, 0x69, 0x74, 0x75, 0x61, 0xc3, 0xa7,
    0xc3, 0xb5, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x64, 0x65, 0x73, 0x65, 0x6a, 0x61, 0x64, 0x61, 0x73,
    0x20, 0x6f, 0x6e, 0x64, 0x65, 0x20, 0x6d, 0x61, 0x69, 0x73, 0x20, 0x64, 0x65, 0x20, 0x75, 0x6d,
    0x61, 0x20, 0x62, 0x6f, 0x6c, 0x61, 0x20, 0x65, 0x73, 0x74, 0xc3, 0xa1, 0x20, 0x70, 0x72, 0x65,
    0x73, 0x65, 0x6e, 0x74, 0x65, 0x20, 0x6e, 0x6f, 0x20, 0x61, 0x6d, 0x62, 0x69, 0x65, 0x6e, 0x74,
    0x65, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x02, 0x04, 0x12, 0x03, 0x3f, 0x02, 0x0a,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x02, 0x06, 0x12, 0x03, 0x3f, 0x0b, 0x15, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x04, 0x02, 0x02, 0x01, 0x12, 0x03, 0x3f, 0x18, 0x1d, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x04, 0x02, 0x02, 0x03, 0x12, 0x03, 0x3f, 0x20, 0x21, 0x0a, 0x5b, 0x0a, 0x04, 0x04, 0x04,
    0x02, 0x03, 0x12, 0x03, 0x40, 0x02, 0x2a, 0x22, 0x4e, 0x21, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x61,
    0x20, 0x64, 0x69, 0x6e, 0xc3, 0xa2, 0x6d, 0x69, 0x63, 0x61, 0x20, 0x64, 0x65, 0x20, 0x72, 0x6f,
    0x62, 0xc3, 0xb4, 0x73, 0x20, 0x61, 0x6d, 0x61, 0x72, 0x65, 0x6c, 0x6f, 0x73, 0x2e, 0x20, 0x45,
    0x6d, 0x20, 0x67, 0x65, 0x72, 0x61, 0x6c, 0x20, 0x73, 0x65, 0x6d, 0x70, 0x72, 0x65, 0x20, 0x73,
    0xc3, 0xa3, 0x6f, 0x20, 0x65, 0x6e, 0x76, 0x69, 0x61, 0x64, 0x6f, 0x73, 0x20, 0x33, 0x20, 0x72,
    0x6f, 0x62, 0xc3, 0xb4, 0x73, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x03, 0x04,
    0x12, 0x03, 0x40, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x03, 0x06, 0x12, 0x03,
    0x40, 0x0b, 0x16, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x03, 0x01, 0x12, 0x03, 0x40, 0x18,
    0x25, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x03, 0x03, 0x12, 0x03, 0x40, 0x28, 0x29, 0x0a,
    0x58, 0x0a, 0x04, 0x04, 0x04, 0x02, 0x04, 0x12, 0x03, 0x41, 0x02, 0x28, 0x22, 0x4b, 0x21, 0x20,
    0x4c, 0x69, 0x73, 0x74, 0x61, 0x20, 0x64, 0x69, 0x6e, 0xc3, 0xa2, 0x6d, 0x69, 0x63, 0x61, 0x20,
    0x64, 0x65, 0x20, 0x72, 0x6f, 0x62, 0xc3, 0xb4, 0x73, 0x20, 0x61, 0x7a, 0x75, 0x69, 0x73, 0x2e,
    0x20, 0x45, 0x6d, 0x20, 0x67, 0x65, 0x72, 0x61, 0x6c, 0x20, 0x73, 0x65, 0x6d, 0x70, 0x72, 0x65,
    0x20, 0x73, 0xc3, 0xa3, 0x6f, 0x20, 0x65, 0x6e, 0x76, 0x69, 0x61, 0x64, 0x6f, 0x73, 0x20, 0x33,
    0x20, 0x72, 0x6f, 0x62, 0xc3, 0xb4, 0x73, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02,
    0x04, 0x04, 0x12, 0x03, 0x41, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x04, 0x06,
    0x12, 0x03, 0x41, 0x0b, 0x16, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x04, 0x01, 0x12, 0x03,
    0x41, 0x18, 0x23, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x04, 0x03, 0x12, 0x03, 0x41, 0x26,
    0x27, 0x0a, 0x9f, 0x01, 0x0a, 0x04, 0x04, 0x04, 0x02, 0x05, 0x12, 0x03, 0x42, 0x02, 0x26, 0x22,
    0x91, 0x01, 0x21, 0x20, 0x53, 0x69, 0x74, 0x75, 0x61, 0xc3, 0xa7, 0xc3, 0xa3, 0x6f, 0x20, 0x65,
    0x6d, 0x20, 0x71, 0x75, 0x65, 0x20, 0x61, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x64, 0x61, 0x20,
    0x73, 0x65, 0x20, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x2c, 0x20, 0x73, 0x65, 0x72,
    0xc3, 0xa1, 0x20, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x64, 0x6f, 0x20, 0x6e, 0x6f, 0x20,
    0x66, 0x75, 0x74, 0x75, 0x72, 0x6f, 0x2c, 0x20, 0x70, 0x61, 0x72, 0x61, 0x20, 0x22, 0x6f, 0x62,
    0x72, 0x69, 0x67, 0x61, 0x72, 0x22, 0x20, 0x6f, 0x73, 0x20, 0x72, 0x6f, 0x62, 0xc3, 0xb4, 0x73,
    0x20, 0x73, 0x65, 0x6d, 0x70, 0x72, 0x65, 0x20, 0x61, 0x20, 0x73, 0x65, 0x20, 0x72, 0x65, 0x70,
    0x6f, 0x73, 0x69, 0x63, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x65, 0x6d, 0x20, 0x61, 0x75, 0x74, 0x6f,
    0x6e, 0x6f, 0x6d, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x20, 0x6e, 0x6f, 0x20, 0x63, 0x61, 0x6d,
    0x70, 0x6f, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x05, 0x04, 0x12, 0x03, 0x42, 0x02,
    0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x05, 0x05, 0x12, 0x03, 0x42, 0x0b, 0x11, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x05, 0x01, 0x12, 0x03, 0x42, 0x18, 0x21, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x04, 0x02, 0x05, 0x03, 0x12, 0x03, 0x42, 0x24, 0x25, 0x0a, 0x23, 0x0a, 0x04, 0x04,
    0x04, 0x02, 0x06, 0x12, 0x03, 0x43, 0x02, 0x21, 0x22, 0x16, 0x21, 0x20, 0x54, 0x65, 0x6d, 0x70,
    0x6f, 0x3a, 0x20, 0x31, 0x2c, 0x20, 0x32, 0x2c, 0x20, 0x33, 0x20, 0x6f, 0x75, 0x20, 0x34, 0x0a,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x06, 0x04, 0x12, 0x03, 0x43, 0x02, 0x0a, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x04, 0x02, 0x06, 0x05, 0x12, 0x03, 0x43, 0x0b, 0x11, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x04, 0x02, 0x06, 0x01, 0x12, 0x03, 0x43, 0x18, 0x1c, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04,
    0x02, 0x06, 0x03, 0x12, 0x03, 0x43, 0x1f, 0x20, 0x0a, 0x32, 0x0a, 0x04, 0x04, 0x04, 0x02, 0x07,
    0x12, 0x03, 0x44, 0x02, 0x29, 0x22, 0x25, 0x21, 0x20, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x64,
    0x61, 0x64, 0x65, 0x20, 0x64, 0x65, 0x20, 0x47, 0x6f, 0x6c, 0x73, 0x20, 0x64, 0x6f, 0x20, 0x54,
    0x69, 0x6d, 0x65, 0x20, 0x41, 0x6d, 0x61, 0x72, 0x65, 0x6c, 0x6f, 0x0a, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x04, 0x02, 0x07, 0x04, 0x12, 0x03, 0x44, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04,
    0x02, 0x07, 0x05, 0x12, 0x03, 0x44, 0x0b, 0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x07,
    0x01, 0x12, 0x03, 0x44, 0x18, 0x24, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x07, 0x03, 0x12,
    0x03, 0x44, 0x27, 0x28, 0x0a, 0x2f, 0x0a, 0x04, 0x04, 0x04, 0x02, 0x08, 0x12, 0x03, 0x45, 0x02,
    0x27, 0x22, 0x22, 0x21, 0x20, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x64, 0x61, 0x64, 0x65, 0x20,
    0x64, 0x65, 0x20, 0x47, 0x6f, 0x6c, 0x73, 0x20, 0x64, 0x6f, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x20,
    0x41, 0x7a, 0x75, 0x6c, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x08, 0x04, 0x12, 0x03,
    0x45, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x08, 0x05, 0x12, 0x03, 0x45, 0x0b,
    0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x08, 0x01, 0x12, 0x03, 0x45, 0x18, 0x22, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x08, 0x03, 0x12, 0x03, 0x45, 0x25, 0x26, 0x0a, 0x32, 0x0a,
    0x04, 0x04, 0x04, 0x02, 0x09, 0x12, 0x03, 0x46, 0x02, 0x29, 0x22, 0x25, 0x21, 0x20, 0x51, 0x75,
    0x61, 0x6e, 0x74, 0x69, 0x64, 0x61, 0x64, 0x65, 0x20, 0x64, 0x65, 0x20, 0x47, 0x6f, 0x6c, 0x73,
    0x20, 0x64, 0x6f, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x20, 0x41, 0x6d, 0x61, 0x72, 0x65, 0x6c, 0x6f,
    0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x09, 0x04, 0x12, 0x03, 0x46, 0x02, 0x0a, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x09, 0x05, 0x12, 0x03, 0x46, 0x0b, 0x11, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x04, 0x02, 0x09, 0x01, 0x12, 0x03, 0x46, 0x18, 0x23, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x04, 0x02, 0x09, 0x03, 0x12, 0x03, 0x46, 0x26, 0x28, 0x0a, 0x2f, 0x0a, 0x04, 0x04, 0x04, 0x02,
    0x0a, 0x12, 0x03, 0x47, 0x02, 0x27, 0x22, 0x22, 0x21, 0x20, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
    0x64, 0x61, 0x64, 0x65, 0x20, 0x64, 0x65, 0x20, 0x47, 0x6f, 0x6c, 0x73, 0x20, 0x64, 0x6f, 0x20,
    0x54, 0x69, 0x6d, 0x65, 0x20, 0x41, 0x7a, 0x75, 0x6c, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04,
    0x02, 0x0a, 0x04, 0x12, 0x03, 0x47, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x0a,
    0x05, 0x12, 0x03, 0x47, 0x0b, 0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x0a, 0x01, 0x12,
    0x03, 0x47, 0x18, 0x21, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x0a, 0x03, 0x12, 0x03, 0x47,
    0x24, 0x26,
];

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
